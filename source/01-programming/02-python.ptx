<?xml version="1.0" encoding="UTF-8" ?>

<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="programming-python" jupyter-kernel="python">
    <title>Using Python</title>
<!--    <objectives>
        <ul>
            <li>
                <p>
TODO
                </p>
            </li>
        </ul>
    </objectives>-->
    <exploration>
        <introduction>
            <p>
Throughout this book, we will use <term>Code cells</term> to run code within
a web browser. This activity will help you start to learn how to translate
several mathematical operations into simple Python code and execute this
code in using a cell.
            </p>
        </introduction>
        <task>
            <p>
Run the below Code cell to compute <m>95+87</m>.
            </p>
            <sage language="python">
                <input>
result = 95+87
print(result)
                </input>
            </sage>
        </task>
        <task>
            <p>
Attempting to run the below Code cell to compute <m>11(12)</m> will result
in something called a <c>TypeError</c>. Try modifying the line <c>result = 11(12)</c>
to use Python's <c>*</c> multiplication operator and re-run the cell.
            </p>
<aside><p>The <c># FIX ME!</c> in this task's code cell is a <term>comment</term> ignored by the computer. Comments
are VERY useful for leaving notes to help other humans who will read your code later.</p></aside> 
            <sage language="python">
                <input>
result = 11(12) # FIX ME!
print(result)
                </input>
            </sage>
        </task>
        <task>
            <p>
Compare the results from evaluating both <c>7/3</c> and <c>7//3</c>.
Then try using <c>/</c>
and <c>//</c> with other numbers to explore.
            </p>
            <sage language="python">
                <input>
result = 7/3
print(result)
                </input>
            </sage>
            <sage language="python">
                <input>
result = 7//3
print(result)
                </input>
            </sage>
            <p>
Write a sentence or two explaining your guess as to
why and how these results are different.
            </p>
        </task>
        <task>
            <p>
Copy code from previous cells to evaluate and print the result of
computing the expressions <c>6**2</c> and <c>6^2</c>.
Experiment using <c>**</c> and <c>^</c> with other numbers as well.
            </p>
            <sage language="python"/>
            <p>
Then write a sentence or two explaining how these expressions might
have been interpreted by the computer. (Tip: the <c>^</c> behaves
pretty unexpectedly - don't worry if you don't figure out quite what
it's doing on your own!)
            </p>
        </task>
        <task>
            <p>
Use a code cell to print out the value of how Python computes <c>1/10 + 1/5</c>.
            </p>
            <sage language="python"/>
            <p>
Write a sentence explaining why this result might be surprising.
            </p>
        </task>
    </exploration>
    <activity>
        <introduction>
            <p>
In the Python 3 programming language, we may use
the addition <c>+</c>, subtraction <c>-</c>, multiplication <c>*</c>,
division <c>/</c>, and exponentiation <c>**</c> operators to evaluate
the following mathematical expressions, save their values to a <c>result</c>
variable by using the assignment operator <c>=</c> (not <q>equals</q>!),
and then <c>print(result)</c> to output their values.
            </p>
            <p>
Do this for each, and then check each result by computing
each expression's value by hand or using a traditional calculator.
            </p>
        </introduction>
        <task>
            <p>
                <me>4-3(7)</me>
            </p>
            <sage language="python">
                <input>
result = 0
print(result)
                </input>
            </sage>
         </task>
        <task>
            <p>
                <me>3^2+4^2</me>
            </p>
            <sage language="python">
                <input>
result = 0
print(result)
                </input>
            </sage>
        </task>
        <task>
            <p>
Use parentheses, <c>(</c> and <c>)</c>, to group expressions within
more complicated expressions as necessary. Use a code cell to verify
the value of the following expression is roughly <m>0.733</m>.
            </p>
            <p>
                <me>\frac{2^{7-5}+7}{3\times(1+4)}</me>
            </p>
            <sage language="python">
                <input>
result = 0
print(result)
                </input>
            </sage>
        </task>
    </activity>
    <activity>
        <introduction>
            <p>
Computers generally store numerical data using <term>binary</term>
or <term>base-2</term>: sequences of <m>0</m>s and <m>1</m>s.
            </p>
            <p>
Just like the <term>base-10</term> expressions we usually write
describe values in terms of powers of ten, binary numbers
describe values using powers of two.
            </p>
            <p>
                <md>
                    <mrow>
125 &amp;= (1\times 100) + (2\times 10) + (5\times 1)
                    </mrow>
                    <mrow>
&amp;= (1\times 10^2) + (2\times 10^1)+ (5\times 10^0)
                    </mrow>
                    <mrow>
&amp;= (1\times 64) + (1\times 32) + (1\times 16) + (1\times 8) + (1\times 4) + (0\times 2) + (1\times 1)
                    </mrow>
                    <mrow>
&amp;= (1\times 2^6) + (1\times 2^5) + (1\times 2^4) + (1\times 2^3) + (1\times 2^2) +( 0\times 2^1) + (1\times 2^0)
                    </mrow>
                    <mrow>
&amp;= 1111101_2
                    </mrow>
                </md>
            </p>
            <p>
The Python tool <c>format(125,"b")</c> displays the binary form of <m>125</m> automatically:
            </p>
            <sage language="python">
                <input>
result = format(125,"b")
print(result)
                </input>
            </sage>
            <p>
Modify this code to find
the binary form for each of the following numbers. Then check that the result
is valid by adding up appropriate powers of two as shown above.
            </p>
        </introduction>
        <task>
            <p>
                <m>28</m>
            </p>
            <sage language="python"/>
        </task>
        <task>
            <p>
                <m>63</m>
            </p>
            <sage language="python"/>
        </task>
        <task>
            <p>
                <m>493</m>
            </p>
            <sage language="python"/>
        </task>
        <task>
            <p>
                <m>1000</m>
            </p>
            <sage language="python"/>
        </task>
        <task>
            <p>
Python can also automatically convert a binary string to its decimal form using
the tool <c>int("1111101",2)</c>. Use this tool to programmatically
check that each of the binary expressions you found above is correct.
            </p>
            <sage language="python">
                <input>
result = int("1111101",2)
print(result)
                </input>
            </sage>
        </task>
        <task>
            <p>
Running <c>format(6.75,"b")</c> will result in an error.
But considering that <m>2^{-1}=\frac{1}{2}=0.5</m> and <m>2^{-2}=\frac{1}{4}=0.25</m>,
how might <m>6.75</m> be expressed as a binary number?
            </p>
        </task>
    </activity>
    <activity>
        <introduction>
            <p>
While <c>10^3</c> in writing might seem to refer to the number <m>10^3=1000</m>,
in many programming languages such as Python 3, the caret <c>^</c> instead refers to the
<term>bitwise XOR</term> operation,
which can be evaluated by hand using a variation of long addition on the
binary form of each number.
            </p>
            <p>
                <me>
10 \verb|^| 3 = 1010_2  \verb|^| 0011_2
                </me>
            </p>
            <p>
                <me>
\begin{array}{r}
1010_2\\\verb|^|\hspace{1em}
0011_2\\\hline
1001_2
\end{array}
                </me>
            </p>
            <p>
Since <m>1001_2=9</m>, we may now understand the result of the following code cell.
            </p>
            <sage language="python">
                <input>
result = 10^3
print("10^3 in base ten:")
print(result)
new_result = format(result,"b")
print("10^3 in binary:")
print(new_result)
                </input>
            </sage>
        </introduction>
        <task>
            <p>
Based on the above example, write a sentence guessing how the
<c>^</c> operation works.
            </p>
        </task>
        <task>
            <p>
Test your rule by using it with a few combinations of small numbers (less than 16),
using <c>format(n,'b')</c> and <c>x^y</c> in the below Code cell to help you as needed.
If necessary, correct your guess above based upon this experiementation.
            </p>
            <sage language="python"/>
        </task>
        <task>
            <p>
Notice what happens to <c>42</c> if you apply <c>^11</c> to it twice: 
            </p>
            <sage language="python">
                <input>
result = 42^11^11
print(result)
                </input>
            </sage>
            <p>
Is there anything special about the numbers <m>42</m> or <m>11</m> that made this happen?
Try different combinations of numbers.
            </p>
        </task>
        <task>
            <p>
Alice and Bob both have a common favorite number <m>5421483</m> that only they know.
Alice wants to be pass Bob notes containing other numbers, but doesn't
want their nosy friend Eve to find out what those numbers are if she
intercepts the note.
            </p>
            <p>
Write a short paragraph on how the bitwise XOR operator <c>^</c> might
be used along with their favorite number to <term>encrypt</term> Alice's
notes to Bob.
            </p>
        </task>
    </activity>
    <activity>
        <introduction>
            <p>
Let's investigate why
<c>1/10+1/5</c> isn't equal to <c>3/10</c> when evaluated in Python.
            </p>
        </introduction>
        <task>
            <p>
Explain why <m>0.33</m> is the best approximation of <m>\frac{1}{3}</m> using two decimal places, and
why <m>0.67</m> is the best approximation of <m>\frac{2}{3}</m> using two decimal places.
            </p>
        </task>
        <task>
            <p>
Without using technology, compare the result of adding <m>\frac{1}{3}+\frac{1}{3}</m> directly and
approximating the resulting fraction with a decimal, with replacing each <m>\frac{1}{3}</m> with <m>0.33</m>
before adding instead.
            </p>
        </task>
        <task>
            <p>
Without using technology, find the exact values of each of the following sums.
            </p>
            <p>
                <md>
<mrow>1+\frac{1}{3}</mrow>
<mrow>\frac{2}{3}+\frac{2}{3}</mrow>
<mrow>1+0.33</mrow>
<mrow>0.67+0.67</mrow>
                </md>
            </p>
            <p>
What do you notice?
            </p>
        </task>
        <task>
            <p>
Just like <m>\frac{1}{3}</m> cannot be expressed exactly using
a finite number of base-10 digits, fractions like <m>\frac{1}{10}</m> cannot be
described exactly using a finite number of base-2 digits. Replace
each <m>\square</m> below with a <m>0</m> or <m>1</m> to create
the best binary approximation you can.
            </p>
            <p>
                <md>
                    <mrow>
\frac{1}{10}
    \approx
\frac{\square}{2}+\frac{\square}{4}+\frac{\square}{8}+\frac{\square}{16}+\frac{\square}{32}
    =
0.\square\square\square\square\square_2
                    </mrow>
                    <mrow>
\frac{1}{5}
    \approx
\frac{\square}{2}+\frac{\square}{4}+\frac{\square}{8}+\frac{\square}{16}+\frac{\square}{32}
    =
0.\square\square\square\square\square_2
                    </mrow>
                    <mrow>
\frac{3}{10}
    \approx
\frac{\square}{2}+\frac{\square}{4}+\frac{\square}{8}+\frac{\square}{16}+\frac{\square}{32}
    =
0.\square\square\square\square\square_2
                    </mrow>
                </md>
            </p>
        </task>
        <task>
            <p>
Now confirm that the sum of your best binary approximations of <m>\frac{1}{10}</m> and <m>\frac{1}{5}</m>
do not exactly add up to your best binary approximation of <m>\frac{3}{10}</m>.
            </p>
        </task>
    </activity>
    <exercises>
        <exercise>
            <statement>
            <p>
Find the value of the following expression by hand.
            </p>
            <me>3^{\frac{1+7}{6-2}}\times 4</me>
            </statement>
        </exercise>
        <exercise>
            <statement>
            <p>
Check your work in the previous exercise using a Code cell.
            </p>
            <sage language="python"/>
            </statement>
        </exercise>
        <exercise>
            <statement>
            <p>
Use powers of two to verify that <m>217=11011001_2</m> by hand.
            </p>
            </statement>
        </exercise>
        <exercise>
            <statement>
            <p>
Show how to use both the <c>int</c> and <c>format</c> Python tools to verify that <m>217=11011001_2</m> programmatically.
            </p>
            <sage language="python"/>
            </statement>
        </exercise>
        <exercise>
            <statement>
            <p>
Find an approximation of <m>\frac{1}{7}</m> to three decimal places.
            </p>
            </statement>
        </exercise>
        <exercise>
            <statement>
            <p>
What is the value of your approximation when multiplied by <m>7{,}000{,}000</m>? Why isn't the result exactly <m>1{,}000{,}000</m>?
            </p>
            <sage language="python"/>
            </statement>
        </exercise>
        <exercise>
            <statement>
            <p>
Write a paragraph explaining why, in your own words, <c>0.1+0.2</c> doesn't result in <c>0.3</c> in many programming languages.
            </p>
            </statement>
        </exercise>
    </exercises>
</section>


