<?xml version="1.0" encoding="UTF-8" ?>

<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="programming-sagemath" jupyter-kernel="sage">
    <title>The SageMath Kernel</title>
    <exploration xml:id="programming-sagemath-preview">
        <introduction>
            <p>
Many of the features of the Python language/kernel are optimized for computational
efficiency, such as using binary approximations of fractions. This is valuable for
applications like data science, but for studying mathematics itself we will
find it useful to have another kernel available to more precisely model things,
namely, <term>SageMath</term>.
            </p>
        </introduction>
        <task>
            <p>
Confirm that <c>6^2</c> and
<c>6**2</c> both represent <m>6^2=36</m> in SageMath.
            </p>
        </task>
        <task>
            <p>
Confirm that <c>1/10+1/5</c> equals exactly <m>\frac{3}{10}</m> in SageMath.
            </p>
        </task>
        <task>
            <p>
Finally, use <c>show( (x+1)^3 == ((x+1)^3).full_simplify() )</c> to display the
algebraic formula <m>(x+1)^3=x^3+3x^2+3x+1</m>.
            </p>
        </task>
    </exploration>
    <activity>
        <introduction>
            <p>
SageMath is a mathematical software system designed for representing ideas
from mathematics as faithfully as possible.
            </p>
        </introduction>
        <task>
            <p>
Several important numbers in mathematics may be used in SageMath with <c>pi</c>
for the circular constant <m>\pi</m>, <c>e</c> for the natural number <m>e</m>,
and <c>i</c> for the imaginary unit <m>i</m>. (Don't worry if you aren't familiar
with these yet.)
            </p>
            <p>
Check to see what SageMath gives as the value of <m>e^{i\pi}+1</m>.
            </p>
         </task>
        <task>
            <p>
SageMath won't approximate any values unless asked. You can check this by typing <c>pi^2</c>
and <c>e^3</c>. To make them appear with mathematical formatting as <m>\pi^2</m>
and <m>e^3</m>, use the <c>show()</c> syntax
like you did in <xref ref="programming-sagemath-preview"/>.
            </p>
         </task>
        <task>
            <p>
If an approximation is desired, the numerical approximation tool <c>n</c> may be used.
Find an approximate value for <m>\sqrt{2}</m> by using <c>sqrt(2).n(digits=10)</c>.
            </p>
         </task>
        <task>
            <p>
Which is bigger: <m>\pi^e</m> or <m>e^\pi</m>?
            </p>
         </task>
    </activity>
    <activity xml:id="programming-sagemath-csvars">
        <introduction>
            <p>
The term <term>variable</term> means slightly different things in computer science and mathematics.
In computer science, variables are used to store and retrieve
data within an application. In mathematics, variables are used to represent an
arbitrary or unknown value of data within a statement.
            </p>
            <p>
These two concepts are related, but not exactly the same. Since SageMath is built upon Python,
it provides support for both <term>CS variables</term> and <term>math variables</term>.
            </p>
        </introduction>
        <task>
            <p>
To assign a value to a CS variable, the <term>assignment operator</term> <c>=</c> is used.
It's considered best practice to give CS variables <term>semantic</term>, that is, descriptive
names such as <c>temperature_in_room</c>, using lowercase letters and underscore <c>_</c> characters.
            </p>
            <p>
For each member of your group, use a code cell to assign a CS variable storing the number of pens
(or pencils, or any object you'd like) each person has with them.
An example is given in <xref ref="programming-sagemath-pens"/>;
note that only a single Code cell is necessary, but each assignment should be made on a separate line.
            </p>
            <sidebyside>
                <table>
                    <title>Sample pen data</title>
                    <tabular>
                        <row><cell>Name</cell><cell>Pens kept in backpack</cell></row>
                        <row><cell>Craig</cell><cell>1</cell></row>
                        <row><cell>Laura</cell><cell>30</cell></row>
                        <row><cell>Phillip</cell><cell>18</cell></row>
                        <row><cell>Sherill</cell><cell>03</cell></row>
                        <row><cell>Steven</cell><cell>22</cell></row>
                    </tabular>
                </table>
                <listing xml:id="programming-sagemath-pens">
                    <caption>Corresponding variable assignments</caption>
                    <program language="sage">
                        <input>craig_pens = 1
laura_pens = 30
phillip_pens = 18
sherill_pens = 3
steven_pens = 22</input>
                    </program>
                </listing>
            </sidebyside>
        </task>
        <task>
            <p>
The value stored in a CS variable may be reused later by using the variable name. For example,
<c>craig_pens+laura_pens+phillip_pens+sherill_pens+steven_pens</c>
would return the result <c>74</c>.
            </p>
            <p>
Use a code cell to find the sum of the pens in your group by writing the sum of the variable names.
(Later we will learn much more elegant patterns for storing and using lists of data while still
using long descriptive variable names as recommended.)
            </p>
        </task>
        <task>
            <p>
Variables can be overwritten. In a Jupyter notebook, you can go to a previous cell and edit the assignment,
and you can also create a new Code cell and write the assignment.
            </p>
            <p>
Try editing the assignment of one group member's pens in the previous Code cell, and try overwriting
another group member's pens value by creating a Code cell below. For example, in
<xref ref="programming-sagemath-pens-1"/> the original assignment for <c>craig_pens</c> is amended,
but you could also amend the value of <c>phillip_pens</c> by creating a new Code cell below
with the line <c>phillip_pens = 42</c>.
            </p>
            <listing xml:id="programming-sagemath-pens-1">
                <caption>Amended variable assignments</caption>
                <program language="sage">
                    <input>craig_pens = 100
laura_pens = 30
phillip_pens = 18
sherill_pens = 3
steven_pens = 22</input>
                </program>
            </listing>
        </task>
        <task>
            <p>
Before doing anything further, write a sentence about what you notice about the result of your existing code cell
adding the variables together.
            </p>
        </task>
        <task>
            <p>
Now use the <kbd>Kernel</kbd> &gt; <kbd>Run All</kbd> menu option in CoCalc.
Write a sentence or two explaining how the sum changed, and why.
            </p>
        </task>
        <task>
            <p>
Copy the line of code summing your variables into a new Code cell below
(e.g. <c>craig_pens+laura_pens+phillip_pens+sherill_pens+steven_pens</c>).
Write a sentence explaining why you get a different result even though the Code cells are exactly the same.
            </p>
        </task>
    </activity>
    <activity>
        <introduction>
            <p>
We now will explore mathematical variables.
            </p>
        </introduction>
        <task>
            <p>
Unlike CS variables, mathematical variables represent an unknown value or arbitrary value, rather than
storing a specific piece of data. These variables are often represented by single letters rather than the
long semantic names used for CS variables. For example, SageMath always assumes <c>x</c> is
a mathematical variable named <m>x</m>.
            </p>
            <p>
Other math variables are declared using by using the <c>var()</c> tool. For example,
<c>a = var("a")</c> declares <c>a</c> to be the variable named <m>a</m>, and <c>b,c = var("b c")</c>
declares both <c>b</c> and <c>c</c> to be variables.
            </p>
            <p>
Use a Code cell to declare <m>y</m> and <m>z</m> to be variables.
            </p>
        </task>
        <task>
            <p>
Math variables may be manipulated just like literal values or values store in CS variables. But since
they don't store specific values, these combinations of variables represent an <term>expression</term>.
            </p>
            <p>
Use SageMath's <c>show()</c> tool to display the expression <m>x^2+4yz</m> using a Code cell. Remember that
<m>4yz=4\times y\times z</m> requires the <c>*</c> operator to perform multiplication.
            </p>
        </task>
        <task>
            <p>
An expression can itself be stored in a CS variable using the assignment operator <c>=</c>;
for example, <c>quadratic = x^2-4*x+4</c> saves the expression <m>x^2-4x+4</m> using the name <c>quadratic</c>.
            </p>
            <p>
Assign the expression <m>x^2+4yz</m> to a CS variable with the name <c>my_expression</c>.
            </p>
        </task>
        <task>
            <p>
Math variables and expressions are useful for describing how data should be manipulated before the
values of those data are known.
            </p>
            <p>
For example, suppose we now want to assume <m>x=6,y=0,z=-3</m> and compute the corresponding value
for the expression <m>x^2+4yz</m> saved as <c>my_expression</c>. You can check that
<m>6^2+4(0)(-3)=36</m>, either by hand or evaluating <c>6^2+4*0*(-3)</c>.
But to have SageMath compute this for you immediately, you could use the following syntax:
<c>my_expression(x=6,y=0,z=-3)</c>.
            </p>
            <p>
Use a Code cell to substitute the values <m>x=1,y=2,z=3</m> into the expression <m>x^2+4yz</m>,
and confirm that the resulting value is equal to <m>1^2+4(2)(3)</m>.
            </p>
        </task>
        <task>
            <p>
SageMath also supports common simplifications of expressions with the <c>full_simplify()</c> tool.
For example, <c>show( ((x+1)^3).full_simplify() )</c> returns the equivalent expression
<m>x^3+3x^2+3x+1</m>.
            </p>
            <p>
Use <c>full_simplify()</c> to find an equivalent expression for <m>(x+y)^4</m>.
            </p>
        </task>
    </activity>
    <activity>
        <introduction>
            <p>
In addition to storing and manipulating expressions of mathematical variables,
SageMath also supports studying <term>equations</term> that set two expressions equal to one another.
            </p>
        </introduction>
        <task>
            <p>
Since the equal sign <kbd>=</kbd> is already used as the assignment operator <c>=</c>,
two equal signs are used to represent the equality operator <c>==</c>.
            </p>
            <p>
When only simple numerical values are present, the equality operator behaves similarly in both Python
and SageMath: it evaluates both sides of the equation and returns a <term>Boolean value</term>
of <c>True</c> or <c>False</c>. For example, <c>3*2==6</c> returns <c>True</c> while
<c>3^2==6</c> returns <c>False</c>.
            </p>
            <p>
Use the equality operator to verify that <m>1+2+3+4+5+6</m> has the same value as
<m>\frac{6\times 7}{2}</m>.
            </p>
        </task>
        <task>
            <p>
When mathematical variables or more advanced values are present, the equality operator
will return an equation, but won't immediately reveal whether this equation is true or false.
            </p>
            <p>
Check this by entering <c>x==sqrt(x^2)</c> into a Code cell below. (Remember, you can use
the <c>show()</c> tool to make it appear as <m>x=\sqrt{x^2}</m>.)
            </p>
        </task>
        <task>
            <p>
SageMath is able to verify the truth of simple equations by using the <c>bool()</c> tool.
For example, <c>bool(x==sqrt(x^2))</c> will return <c>False</c>, since it fails when <m>x=-4</m>.
            </p>
            <p>
Use the <c>bool()</c> tool to verify that <m>3e^{1-\frac{1}{2}i\pi}</m> has the same value
as <m>-3ei</m>.
            </p>
        </task>
        <task>
            <p>
Equations can be manipulated by SageMath similarly to how you manipulate them by hand. For example:
            </p>
            <p>
                <md>
                    <mrow>x+7\amp=11</mrow>
                    <mrow>\scriptsize{-7}\amp\phantom{=}\scriptsize{-7}</mrow>
                    <mrow>x\amp=4</mrow>
                </md>
            </p>
            <p>
This may be verified by entering <c>(x+7==11)-7</c> into a Code cell.
            </p>
            <p>
Solve the equation <m>2x+5=x-7</m> by subtracting <m>x</m> and <m>5</m> from both sides of the equation.
            </p>
        </task>
        <task>
            <p>
SageMath can automatically solve many equations for you using the <c>solve()</c> tool.
For example, <c>solve(x+7==11,x)</c> reveals the solution <m>x=4</m> immediately.
            </p>
            <p>
Use the <c>solve()</c> tool to solve <m>2x+5=x-7</m> automatically.
            </p>
        </task>
        <task>
            <p>
Use the <c>solve()</c> tool to find both solutions to <m>x^2+3x+7=4-x</m>.
            </p>
        </task>
    </activity>
    <exercises>
        <exercise>
            <statement>
            <p>
Use a SageMath code cell to find the simplified value of <m>i^{\ln(e^4)}</m>.
            </p>
            </statement>
        </exercise>
        <exercise>
            <statement>
            <p>
Save the mathematical expression
<m>\sin(\frac{\pi}{7})\cos(\frac{5\pi}{14})+\sin(\frac{5\pi}{14})\cos(\frac{\pi}{7})</m>
to a CS variable named <c>fancy_math</c>. Then (since the <q>trigonometric functions</q> <m>\sin,\cos</m>
aren't immediately simplified by SageMath) use <c>fancy_math.trig_reduce()</c> to find its exact value.
            </p>
            </statement>
        </exercise>
        <exercise>
            <statement>
            <p>
Are you satisfied with the above results? Write a sentence or two explaining why or why not.
            </p>
            </statement>
        </exercise>
        <exercise>
            <statement>
            <p>
Many mathematicians believe (but no one has been able to prove) that 
the circular constant <m>\pi=3.14159\cdots</m> is a
<q>normal</q> number, which means that every finite sequence of digits will appear eventually
in its decimal expression.
For example, the SageMath code <c>pi.n(digits=10)</c> reveals that <m>65</m> appears as the 7th and
8th decimal digits of <m>\pi</m>.
            </p>
            <p>
Use SageMath to show that <m>42</m> appears somewhere in the decimal expression of <m>\pi</m>.
            </p>
            </statement>
        </exercise>
        <exercise>
            <statement>
            <p>
Use the <c>var()</c> tool to declare the CS variables <c>m</c> and <c>n</c> to represent the math variables
<m>m</m> and <m>n</m>. Then have the CS variable <c>quotient_expression</c> represent the mathematical
expression <m>\frac{m+1}{n^2-3n+2}</m>, and use <c>show()</c> to display
<c>quotient_expression</c> with mathematical formatting.
            </p>
            </statement>
        </exercise>
        <exercise>
            <statement>
            <p>
Compute the value of <m>\frac{7+1}{(-3)^2-3(-3)+2}</m> by substituting <m>m=7</m> and <m>n=-3</m>
into <c>quotient_expression</c>.
            </p>
            </statement>
        </exercise>
        <exercise>
            <statement>
            <p>
Save the mathematical equation <m>x^3+1=(x+1)(x^2-x+1)</m> to the CS variable <c>sum_of_cubes</c>.
Use the <c>bool()</c> tool to verify that <c>sum_of_cubes</c> represents a valid mathematical identity.
            </p>
            </statement>
        </exercise>
        <exercise>
            <statement>
            <p>
Show how to solve the equation <m>17-2x=3x+2</m> by hand (by uploading a photograph of your written work).
Then show how to use SageMath to solve it automatically.
            </p>
            </statement>
        </exercise>
    </exercises>
</section>


