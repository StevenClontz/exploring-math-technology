<?xml version="1.0" encoding="UTF-8" ?>

<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="programming-sagemath">
    <title>The SageMath Kernel</title>
    <objectives>
        <ul>
            <li>
                <p>
TODO
                </p>
            </li>
        </ul>
    </objectives>

    <exploration xml:id="programming-sagemath-preview">
        <introduction>
            <p>
Many of the features of the Python language/kernel are optimized for computational
efficiency, such as using binary approximations of fractions. This is valuable for
applications like data science, but for studying mathematics itself we will
find it useful to have another kernel available to more precisely model things.
            </p>
        </introduction>
        <task>
            <p>
Use the latest <c>SageMath</c> kernel to confirm that <c>6^2</c> and
<c>6**2</c> both represent <m>6^2=36</m>.
            </p>
        </task>
        <task>
            <p>
Confirm that <c>1/10+1/5</c> equals exactly <m>\frac{3}{10}</m> in SageMath.
            </p>
        </task>
        <task>
            <p>
Finally, use <c>show( (x+1)^3 == ((x+1)^3).full_simplify() )</c> to display the
algebraic formula <m>(x+1)^3=x^3+3x^2+3x+1</m>.
            </p>
        </task>
    </exploration>
    <activity>
        <introduction>
            <p>
SageMath is a mathematical software system designed for representing ideas
from mathematics as faithfully as possible.
            </p>
        </introduction>
        <task>
            <p>
Several important numbers in mathematics may be used in SageMath with <c>pi</c>
for the circular constant <m>\pi</m>, <c>e</c> for the natural number <m>e</m>,
and <c>i</c> for the imaginary unit <m>i</m>. (Don't worry if you aren't familiar
with these yet.)
            </p>
            <p>
Check to see what Sage gives as the value of <m>e^{i\pi}+1</m>.
            </p>
         </task>
        <task>
            <p>
SageMath won't approximate any values unless asked. You can check this by typing <c>pi^2</c>
and <c>e^3</c>. To make them appear with mathematical formatting as <m>\pi^2</m>
and <m>e^3</m>, use the <c>show()</c> syntax
like you did in <xref ref="programming-sagemath-preview"/>.
            </p>
         </task>
        <task>
            <p>
If an approximation is desired, the numerical approximation tool <c>n</c> may be used.
Find an approximate value for <m>\sqrt{2}</m> by using <c>sqrt(2).n(digits=10)</c>.
            </p>
         </task>
        <task>
            <p>
Which is bigger: <m>\pi^e</m> or <m>e^\pi</m>?
            </p>
         </task>
    </activity>
    <activity xml:id="programming-sagemath-csvars">
        <introduction>
            <p>
The term <term>variable</term> means slightly different things in computer science and mathematics.
In computer science, variables are used to store and retrieve
data within an application. In mathematics, variables are used to represent an
arbitrary or unknown value of data within a statement.
            </p>
            <p>
These two concepts are related, but not exactly the same. Since SageMath is built upon Python,
it provides support for both <term>CS variables</term> and <term>math variables</term>.
            </p>
        </introduction>
        <task>
            <p>
To assign a value to a CS variable, the <term>assignment operator</term> <c>=</c> is used.
It's considered best practice to give CS variables long descriptive names such as
<c>temperature_in_room</c>.
            </p>
            <p>
For each member of your group, use a code cell to assign a CS variable storing the number of pens
(or pencils, or any object you'd like) each person has with them.
An example is given in <xref ref="programming-sagemath-pens"/>;
note that only a single Code cell is necessary, but each assignment should be made on a separate line.
            </p>
            <sidebyside>
                <table>
                    <title>Pens owned by the author's immediate family.</title>
                    <tabular>
                        <row><cell>Name</cell><cell>Pens kept in backpack</cell></row>
                        <row><cell>Craig</cell><cell>1</cell></row>
                        <row><cell>Laura</cell><cell>30</cell></row>
                        <row><cell>Phillip</cell><cell>18</cell></row>
                        <row><cell>Sherill</cell><cell>03</cell></row>
                        <row><cell>Steven</cell><cell>22</cell></row>
                    </tabular>
                </table>
                <listing xml:id="programming-sagemath-pens">
                    <caption>Corresponding variable assignments</caption>
                    <p><cd>craig_pens = 1
laura_pens = 30
phillip_pens = 18
sherill_pens = 3
steven_pens = 22</cd></p>
                </listing>
            </sidebyside>
        </task>
        <task>
            <p>
The value stored in a CS variable may be reused later by using the variable name. For example,
<c>craig_pens+laura_pens+phillip_pens+sherill_pens+steven_pens</c>
would return the result <c>74</c>.
            </p>
            <p>
Use a code cell to find the sum of the pens in your group by writing the sum of the variable names.
(Later we will learn much more elegant patterns for storing and using lists of data while still
using long descriptive variable names as recommended.)
            </p>
        </task>
        <task>
            <p>
Variables can be overwritten. In a Jupyter notebook, you can go to a previous cell and edit the assignment,
and you can also create a new Code cell and write the assignment.
            </p>
            <p>
Try editing the assignment of one group member's pens in the previous Code cell, and try overwriting
another group member's pens value by creating a Code cell below. For example, in
<xref ref="programming-sagemath-pens-1"/> the original assignment for <c>craig_pens</c> is amended,
but you could also amend the value of <c>phillip_pens</c> by creating a new Code cell below
with the line <c>phillip_pens = 42</c>.
            </p>
            <listing xml:id="programming-sagemath-pens-1">
                <caption>Amended variable assignments</caption>
                <p><cd>craig_pens = 100
laura_pens = 30
phillip_pens = 18
sherill_pens = 3
steven_pens = 22</cd></p>
            </listing>
        </task>
        <task>
            <p>
Before doing anything further, write a sentence about what you notice about the result of your existing code cell
adding the variables together.
            </p>
        </task>
        <task>
            <p>
Now use the <c>Kernel &gt; Run All</c> menu option.
Write a sentence or two explaining how the sum changed, and why.
            </p>
        </task>
        <task>
            <p>
Copy the line of code summing your variables into a new Code cell below
(e.g. <c>craig_pens+laura_pens+phillip_pens+sherill_pens+steven_pens</c>).
Write a sentence explaining why you get a different result even though the Code cells are exactly the same.
            </p>
        </task>
    </activity>
    <activity>
        <introduction>
            <p>As mentioned in <xref ref="programming-sagemath-csvars"/>,... TODO math variables activity</p>
        </introduction>
    </activity>
</section>


