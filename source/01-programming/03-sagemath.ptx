<?xml version="1.0" encoding="UTF-8" ?>

<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="programming-sagemath" jupyter-kernel="sage">
    <title>Using SageMath</title>
    <exploration xml:id="programming-sagemath-preview">
        <introduction>
            <p>
Many of the features of the Python language are optimized for computational
efficiency, such as using binary approximations of fractions. This is valuable for
applications like data science, but for studying mathematics itself we will
find it useful to have another language that more closely models mathematics,
namely, <term>SageMath</term> (or <q>Sage</q> for short).
            </p>
        </introduction>
        <task>
            <p>
Confirm that <c>6^2</c> and
<c>6**2</c> both represent <m>6^2=36</m> in SageMath code cells
(note the buttons include <q>(Sage)</q>, and we prefer to use <c>show()</c>
in place of <c>print()</c> when using SageMath.).
            </p>
            <sage language="sage">
                <input>
result = 6^2
show(result)
                </input>
            </sage>
            <sage language="sage">
                <input>
result = # FIX ME!
show(result)
                </input>
            </sage>
        </task>
        <task>
            <p>
Confirm that <c>1/10+1/5</c> equals exactly <m>\frac{3}{10}</m> in SageMath.
            </p>
            <sage language="sage"/>
        </task>
        <task>
            <p>
Run the following code cell to display the
algebraic formula <m>(x+1)^3=x^3+3x^2+3x+1</m>.
            </p>
            <sage language="sage">
                <input>
equation = ( (x+1)^3 == ((x+1)^3).full_simplify() )
show(equation)
                </input>
            </sage>
            <p>
Then modify the above cell to find a formula for <m>(x+1)^4</m>.
            </p>
        </task>
    </exploration>
    <activity>
        <introduction>
            <p>
SageMath is a mathematical software system designed for representing ideas
from mathematics as faithfully as possible.
            </p>
        </introduction>
        <task>
            <p>
Several important numbers in mathematics may be used in SageMath with <c>pi</c>
for the circular constant <m>\pi</m>, <c>e</c> for the natural number <m>e</m>,
and <c>i</c> for the imaginary unit <m>i</m>. (Don't worry if you aren't familiar
with these yet.)
            </p>
            <p>
Modify the below cell to see what SageMath gives as the value of <m>e^{i\pi}+1</m>
(you might be surprised to see that it's a very simple number!).
            </p>
            <sage language="sage">
                <input>
result = 2^(3*4)-1
show(result)
                </input>
            </sage>
         </task>
        <task>
            <p>
SageMath won't approximate any values unless asked. You can check this by running
the following cell.
            </p>
            <sage language="sage">
                <input>
result = pi^2
show(result)
                </input>
            </sage>
            <p>
Modify this cell using <c>sqrt(e)</c> to display <m>\sqrt{e}</m>.
            </p>
         </task>
        <task>
            <p>
If an approximation is desired, results may be rounded to four decimal places by running
code as follows.
            </p>
            <sage language="sage">
                <input>
result = round(pi^2,4)
show(result)
                </input>
            </sage>
            <p>
Find an approximate value for <m>\sqrt{e}</m> with five decimal places.
            </p>
            <sage language="sage"/>
         </task>
        <task>
            <p>
Use a code cell to decide which is bigger: <m>\pi^e</m> or <m>e^\pi</m>?
            </p>
            <sage language="sage"/>
         </task>
    </activity>
    <activity xml:id="programming-sagemath-csvars">
        <introduction>
            <p>
The term <term>variable</term> means slightly different things in computer science and mathematics.
In computer science, variables are used to store and retrieve
data within an application. In mathematics, variables are used to represent an
arbitrary or unknown value of data within a statement.
            </p>
            <p>
These two concepts are related, but not exactly the same. Since SageMath is built upon Python,
it provides support for both <term>CS variables</term> and <term>math variables</term>.
            </p>
        </introduction>
        <task xml:id="programming-sagemath-pens">
            <p>
To assign a value to a CS variable, the <term>assignment operator</term> <c>=</c> is used.
It's considered best practice to give CS variables <term>semantic</term>, that is, descriptive
names such as <c>temperature_in_room</c>, using lowercase letters and underscore <c>_</c> characters.
            </p>
            <table>
                <title>Sample pen data</title>
                <tabular>
                    <row bottom="minor"><cell>Name</cell><cell>Pens kept in backpack</cell></row>
                    <row><cell>Craig</cell><cell>1</cell></row>
                    <row><cell>Laura</cell><cell>30</cell></row>
                    <row><cell>Phillip</cell><cell>18</cell></row>
                    <row><cell>Sherill</cell><cell>03</cell></row>
                    <row><cell>Steven</cell><cell>22</cell></row>
                </tabular>
            </table>
            <sage language="sage">
                <input>
craig_pens = 1
laura_pens = 30
phillip_pens = 18
sherill_pens = 3
steven_pens = 22
# We aren't printing or showing anything
# so nothing will appear when you run this!
                </input>
            </sage>
            <p>
For each member of your group, adapt the above code cell to assign a CS variable storing the number of pens
(or pencils, or any object you'd like) each person has with them.
            </p>
            <sage language="sage"/>
        </task>
        <task>
            <p>
The value stored in a CS variable may be reused later by using the variable name. For example,
the following code cell will return the result <c>74</c> after the previous cell is run.
            </p>
            <sage language="sage">
                <input>
show(craig_pens+laura_pens+phillip_pens+sherill_pens+steven_pens)
                </input>
            </sage>
            <p>
Use the below code cell to find the sum of the pens in your group by writing the sum of the variable names
you chose.
(Later we will learn much more elegant patterns for storing and using lists of data while still
using long descriptive variable names as recommended.)
            </p>
            <sage language="sage"/>
        </task>
        <task>
            <p>
CS variables can be overwritten. You can go to a previous cell and edit the assignment,
but you can also create a new Code cell and reassign the variables value.
            </p>
            <p>
Try editing the assignment of Phillip's pens in the Code cell from <xref ref="programming-sagemath-pens"/>,
and try overwriting Laura's pens value by In Code cell below. Re-run both cells.
            </p>
            <sage language="sage"/>
        </task>
        <task>
            <p>
Run the Code cell below.
Write a sentence explaining why you get a different result even though this cell is exactly the same
as a previous cell.
            </p>
        </task>
            <sage language="sage">
                <input>
show(craig_pens+laura_pens+phillip_pens+sherill_pens+steven_pens)
                </input>
            </sage>
    </activity>
    <activity>
        <introduction>
            <p>
We now will explore math variables.
            </p>
        </introduction>
        <task>
            <p>
Unlike CS variables, math variables represent an unknown value or arbitrary value, rather than
storing a specific piece of data. These variables are often represented by single letters rather than the
long semantic names used for CS variables. For example, SageMath always assumes <c>x</c> is
a math variable named <m>x</m>.
            </p>
            <p>
Before running the below cell, guess what you will see.
            </p>
            <sage language="sage">
                <input>
show(x+x)
                </input>
            </sage>
        </task>
        <task>
            <p>
Other math variables are declared using by using the <c>var()</c> tool. For example,
the below code cell assigns the CS variables <c>a</c>, <c>b</c>, <c>c</c> to the math variables
named <m>a,b,c</m>,
and then shows one particular <term>expression</term> with the result of
adding/multiplying these math variables.
            </p>
            <sage language="sage">
                <input>
a = var("a")
b,c = var("b c")
show(a+b*c)
                </input>
            </sage>
            <p>
Use the below Code cell to declare <m>y</m> and <m>z</m> to be variables,
and then show <m>y</m> raised to the <m>z</m> power, that is, <m>y^z</m>.
            </p>
            <sage language="sage"/>
        </task>
        <task>
            <p>
An expression can itself be stored in a CS variable using the assignment operator <c>=</c>;
for example, the below cell saves the expression <m>x^2-4x+4</m> to a CS variable with the name <c>quadratic</c>
and then <c>show()</c>s it.
            </p>
            <sage language="sage">
                <input>
quadratic = x^2-4*x+4
show(quadratic)
                </input>
            </sage>
            <p>
Assign the expression <m>-5x^2+4yz</m> to a CS variable with the name <c>my_expression</c>,
then <c>show()</c> it.
            </p>
            <sage language="sage"/>
        </task>
        <task>
            <p>
Math variables and expressions are useful for describing how data should be manipulated before the
values of those data are known.
            </p>
            <p>
For example, suppose we now want to assume <m>x=6,y=0,z=-3</m> and compute the corresponding value
for the expression <m>-5x^2+4yz</m> saved as <c>my_expression</c>. You can check that
<m>-5\times 6^2+4(0)(-3)=-180</m>, either by hand or evaluating <c>-5*6^2+4*0*(-3)</c>.
But to have SageMath compute this for you immediately, you could run the following cell:
            </p>
            <sage language="sage">
                <input>
show(my_expression(x=6,y=0,z=-3))
                </input>
            </sage>
            <p>
Use a Code cell to substitute the values <m>x=1,y=2,z=3</m> into the expression <m>-5x^2+4yz</m>
instead, and confirm that the resulting value is equal to <m>-5\times 1^2+4(2)(3)</m>.
            </p>
            <sage language="sage"/>
        </task>
        <task>
            <p>
SageMath also supports common simplifications of expressions with the <c>full_simplify()</c> tool.
For example, <c>show( ((x+1)^3).full_simplify() )</c> returns the equivalent expression
<m>x^3+3x^2+3x+1</m>.
            </p>
            <p>
Use <c>full_simplify()</c> to find an equivalent expression for <m>(x+y+z)^2</m>.
            </p>
            <sage language="sage"/>
        </task>
    </activity>
    <activity>
        <introduction>
            <p>
In addition to storing and manipulating expressions of mathematical variables,
SageMath also supports studying <term>equations</term> that set two expressions equal to one another.
            </p>
        </introduction>
        <task>
            <p>
Since the equal sign is already used as the assignment operator <c>=</c>,
two equal signs are used to represent the equality operator <c>==</c>.
            </p>
            <p>
When only simple numerical values are present, the equality operator behaves similarly in both Python
and SageMath: it evaluates both sides of the equation and returns a <term>Boolean value</term>
of <c>True</c> or <c>False</c>. For example, the following code cell verifies that
<m>3(2)=6</m> but <m>3^2\not= 6</m> since it returns <c>True</c> then <c>False</c>.
            </p>
            <sage language="sage">
                <input>
show(3*2==6)
show(3^2==6)
                </input>
            </sage>
            <p>
Use the equality operator to verify that <m>1+2+3+4+5+6=\frac{6\times 7}{2}</m>.
            </p>
            <sage language="sage"/>
        </task>
        <task>
            <p>
When math variables or more advanced values are present, the equality operator
will return an equation, but won't immediately reveal whether this equation is true or false.
            </p>
            <sage language="sage">
                <input>
show( x^2+2*x+1==(x+1)^2 )
                </input>
            </sage>
            <p>
Try <c>show()</c>ing the equation <m>x=\sqrt{x^2}</m> in the cell below.
            </p>
            <sage language="sage"/>
        </task>
        <task>
            <p>
SageMath is able to verify the truth of simple equations by using the <c>bool()</c> tool.
For example, the below cell will return <c>False</c>, since <m>x\not=\sqrt{x^2}</m> when <m>-4</m>
is plugged into <m>x</m>.
            </p>
            <sage language="sage">
                <input>
show( bool(x==sqrt(x^2)) )
                </input>
            </sage>
            <p>
Use <c>bool()</c> to verify that <m>3e^{1-\frac{1}{2}i\pi}</m> has the same value
as <m>-3ei</m>.
            </p>
            <sage language="sage"/>
        </task>
        <task>
            <p>
Equations can be manipulated by SageMath similarly to how you manipulate them by hand. For example:
            </p>
            <p>
                <md>
                    <mrow>x+7&amp;=11</mrow>
                    <mrow>\scriptsize{-7}&amp;\phantom{=}\scriptsize{-7}</mrow>
                    <mrow>x&amp;=4</mrow>
                </md>
            </p>
            <p>
This may be verified by running the following Code cell.
            </p>
            <sage language="sage">
                <input>
show( (x+7==11)-7 )
                </input>
            </sage>
            <p>
Solve the equation <m>2x+5=x-7</m> by subtracting <m>x</m> and <m>5</m> from the equation
using a Code cell.
            <sage language="sage"/>
            </p>
        </task>
        <task>
            <p>
SageMath can automatically solve many equations for you using the <c>solve()</c> tool.
For example, the following code cell reveals the solution <m>x=4</m> immediately.
            </p>
            <sage language="sage">
                <input>
show( solve(x+7==11,x) )
                </input>
            </sage>
            <p>
Use the <c>solve()</c> tool to solve <m>2x+5=x-7</m> automatically.
            </p>
            <sage language="sage"/>
        </task>
        <task>
            <p>
Use the <c>solve()</c> tool to find both solutions to <m>x^2+3x+7=4-x</m>.
            </p>
            <sage language="sage"/>
        </task>
    </activity>
    <exercises>
        <exercise>
            <statement>
            <p>
Use a SageMath code cell to find the simplified value of <m>i^{\ln(e^4)}</m>.
            </p>
            <sage language="sage"/>
            </statement>
        </exercise>
        <exercise>
            <statement>
            <p>
Save the mathematical expression
<m>\sin(\frac{\pi}{7})\cos(\frac{5\pi}{14})+\sin(\frac{5\pi}{14})\cos(\frac{\pi}{7})</m>
to a CS variable named <c>fancy_math</c>. Then (since the <q>trigonometric functions</q> <m>\sin,\cos</m>
aren't immediately simplified by SageMath) use <c>fancy_math.trig_reduce()</c> to find its exact value.
            </p>
            <sage language="sage"/>
            </statement>
        </exercise>
        <exercise>
            <statement>
            <p>
Are you satisfied with the above calculations? Write a sentence or two explaining why or why not.
            </p>
            </statement>
        </exercise>
        <exercise>
            <statement>
            <p>
Many mathematicians believe (but no one has been able to prove) that 
the circular constant <m>\pi=3.14159\cdots</m> is a
<q>normal</q> number, which means that every finite sequence of digits will appear eventually
in its decimal expression.
For example, the SageMath code <c>show(round(pi,10))</c> reveals that <m>65</m> appears as the 7th and
8th decimal digits of <m>\pi</m>: <m>3.141592\mathbf{65}36</m>.
            </p>
            <p>
Use SageMath to show that <m>42</m> appears somewhere in the decimal expression of <m>\pi</m>.
            </p>
            <sage language="sage"/>
            </statement>
        </exercise>
        <exercise>
            <statement>
            <p>
Use the <c>var()</c> tool to declare the CS variables <c>m</c> and <c>n</c> to represent the math variables
<m>m</m> and <m>n</m>. Then have the CS variable <c>quotient_expression</c> represent the mathematical
expression <m>\frac{m+1}{n^2-3n+2}</m>, and use <c>show()</c> to display
<c>quotient_expression</c> with mathematical formatting.
            </p>
            <sage language="sage"/>
            </statement>
        </exercise>
        <exercise>
            <statement>
            <p>
Compute the value of <m>\frac{7+1}{(-3)^2-3(-3)+2}</m> by substituting <m>m=7</m> and <m>n=-3</m>
into <c>quotient_expression</c>.
            </p>
            <sage language="sage"/>
            </statement>
        </exercise>
        <exercise>
            <statement>
            <p>
Save the mathematical equation <m>x^3+1=(x+1)(x^2-x+1)</m> to the CS variable <c>sum_of_cubes</c>.
Use the <c>bool()</c> tool to verify that <c>sum_of_cubes</c> represents a valid mathematical identity.
            </p>
            <sage language="sage"/>
            </statement>
        </exercise>
        <exercise>
            <statement>
            <p>
Show how to solve the equation <m>17-2x=3x+2</m> by hand.
Then show how to use SageMath to solve it automatically.
            </p>
            <sage language="sage"/>
            </statement>
        </exercise>
    </exercises>
</section>


