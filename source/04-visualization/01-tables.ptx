<?xml version="1.0" encoding="UTF-8" ?>
<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="visualization-tables" kernel="python">
    <title>Tables</title>
    <exploration xml:id="visualization-tables-preview">
        <introduction>
            <p>
One of the important features of Python for programmers (and SageMath for mathematicians)
is its extensive <q>standard library</q>: that is, a lot of features are available by
default in the language without installing additional programs.
            </p>
            <p>
However, since different people use Python for different applications, not every feature
can be made availble by default. There are several libraries available in Python for
data science, but we will use one specifically developed for students called, well,
<url href="http://data8.org/datascience/"><c>datascience</c></url>.
                <aside>
Documentation for the <c>datascience</c> library is available at
<url href="http://data8.org/datascience/"/>.
                </aside>
            </p>
        </introduction>
        <task>
            <p>
Copy the contents of <xref ref="visualization-tables-import-datascience" /> into a Code cell
and follow its instructions to install <c>datascience</c> if it is not already available,
then re-run the Code cell.
You will only need to do this process once per project.
            </p>
            <listing xml:id="visualization-tables-import-datascience">
                <caption>Install and import <c>datascience</c></caption>
                <program language="python">
                    <input><xi:include href="../files/visualization-tables-import-datascience.py" parse="text" /></input>
                </program>
            </listing>
        </task>
        <task>
            <p>
To confirm that you can create <c>datascience</c> tables,
copy-paste the contents of <xref ref="visualization-tables-test" /> into a Code cell
to display a nicely formatted table of (incomplete) Scrabble tile data.
            </p>
            <listing xml:id="visualization-tables-test">
                <caption>Try out <c>datascience</c></caption>
                <program language="python">
                    <input>Table().with_columns([
    'letter', ['a', 'b', 'c', 'z'],
    'count',  [  9,   3,   3,   1],
    'points', [  1,   2,   2,  10],
])</input>
                </program>
            </listing>
        </task>
    </exploration>
    <activity>
        <introduction>
            <p>
As previously investigated, dictionaries can be used to describe
complex data with many different properties. In <xref ref="visualization-tables-dictionary-list" />
a list of dictionaries is used to describe several students in standard Python.
            </p>
            <listing xml:id="visualization-tables-dictionary-list">
                <caption>A list of student dictionaries</caption>
                <program language="python">
                    <input><xi:include href="../files/visualization-tables-dictionary-list.py" parse="text" /></input>
                </program>
            </listing>
        </introduction>
        <task>
            <p>
Copy this list into a Code cell, and add data for at least three more students to the list.
            </p>
        </task>
        <task>
            <p>
Data is often stored in a spreadsheet or database
as a <term>table</term>. An illustration of this is given in <xref ref="visualization-tables-student-table" />.
            </p>
            <table xml:id="visualization-tables-student-table">
                <title>Student data table</title>
                <tabular>
                    <row bottom="minor">
                        <cell>Name</cell>
                        <cell>Age</cell>
                        <cell>Favorite Teacher</cell>
                    </row>
                    <row>
                        <cell>Julia</cell>
                        <cell>17</cell>
                        <cell>Mr. Fullinwider</cell>
                    </row>
                    <row>
                        <cell>Jessica</cell>
                        <cell>19</cell>
                        <cell>Dr. Clontz</cell>
                    </row>
                    <row>
                        <cell>Lynn</cell>
                        <cell>18</cell>
                        <cell>Ms. Gilbreath</cell>
                    </row>
                </tabular>
            </table>
            <p>
Tables can be created programmatically by using the technique from <xref ref="visualization-tables-preview" />
or by modifying <xref ref="visualization-tables-from-rows" />.
            </p>
            <listing xml:id="visualization-tables-from-rows">
                <caption>Table from rows</caption>
                <program language="python">
                    <input><xi:include href="../files/visualization-tables-from-rows.py" parse="text" /></input>
                </program>
            </listing>
            <p>
Run <c>from datascience import Table</c> in a Code cell, and then
copy <xref ref="visualization-tables-from-rows" /> to another Code cell. Finally, append the student data you created
in the previous task.
                <aside>
If importing <c>Table</c> fails, run the code from <xref ref="visualization-tables-preview"/>
to make the <c>datascience</c> library available in your project.
                </aside>
            </p>
        </task>
        <task>
            <p>
Since data usually isn't hard-coded into a script, but instead entered by folks who may not be programmers
into a spreadsheet or similar file, we will need a way to read external files containing data.
            </p>
            <p>
Open a spreadsheet application such as Microsoft Excel or Google Sheets. Copy the table of data displayed
in the previous task and paste it into your spreadsheet.
            </p>
            <p>
Save the spreadsheet to a Comma-Separated Values file named <c>student_data.csv</c> and use the
<kbd>(+) New</kbd> menu to upload it to CoCalc in the same folder as this Jupyter notebook.
            </p>
            <p>
Finally, create a Code cell with the line
<c>Table.read_table('student_data.csv')</c>
to check that your CSV data can be imported into a <c>datascience</c> table.
            </p>
        </task>
    </activity>
    <activity>
        <introduction>
            <p>
When working with data in industry, you're likely working with many more rows than can be displayed on
your screen at a given time. In fact, so-called <q>Big Data</q> is one of the fastest-moving fields
of mathematics and computer science. By working with <c>datascience</c> tables, you can filter data as needed for
display and analysis.
            </p>
        </introduction>
        <task>
            <p>
Visit the website <url href="https://vincentarelbundock.github.io/Rdatasets/datasets.html" /> to get a
CSV with the transactions for a (fictional) pizza parlor for the year 2015. (Hint: Use <kbd>Ctrl</kbd>+<kbd>F</kbd>
to search for <q>pizza</q>.) If you like, you can download the CSV and view it in a spreadsheet program
such as Microsoft Excel.
            </p>
            <p>
For this activity however, you should right-click and copy the URL to the CSV file.
In a Code cell, save this URL to the CS variable named <c>pizza_url</c>, and then
import this data directly by running
<c>pizza_table = Table.read_table(pizza_url)</c> and <c>pizza_table.show(20)</c>.
            </p>
<table xml:id="visualization-tables-pizza">
  <title>The first three rows of <c>pizza_table</c></title>
  <tabular>
    <row bottom="minor">
      <cell>
        Unnamed: 0
      </cell>
      <cell>
        id
      </cell>
      <cell>
        date
      </cell>
      <cell>
        time
      </cell>
      <cell>
        name
      </cell>
      <cell>
        size
      </cell>
      <cell>
        type
      </cell>
      <cell>
        price
      </cell>
    </row>
    <row>
      <cell>
        1
      </cell>
      <cell>
        2015-000001
      </cell>
      <cell>
        2015-01-01
      </cell>
      <cell>
        11:38:36
      </cell>
      <cell>
        hawaiian
      </cell>
      <cell>
        M
      </cell>
      <cell>
        classic
      </cell>
      <cell>
        13.25
      </cell>
    </row>
    <row>
      <cell>
        2
      </cell>
      <cell>
        2015-000002
      </cell>
      <cell>
        2015-01-01
      </cell>
      <cell>
        11:57:40
      </cell>
      <cell>
        classic_dlx
      </cell>
      <cell>
        M
      </cell>
      <cell>
        classic
      </cell>
      <cell>
        16
      </cell>
    </row>
    <row>
      <cell>
        3
      </cell>
      <cell>
        2015-000002
      </cell>
      <cell>
        2015-01-01
      </cell>
      <cell>
        11:57:40
      </cell>
      <cell>
        mexicana
      </cell>
      <cell>
        M
      </cell>
      <cell>
        veggie
      </cell>
      <cell>
        16
      </cell>
    </row>
  </tabular>
</table>
        </task>
        <task>
            <p>
There are almost
fifty thousand transactions stored in this dataset.
You could write <c>pizza_table.show()</c> without specifying how many records to
to try and show them all, but CoCalc will complain that 50,000 rows are too many.
            </p>
            <p>
Insert an integer into the <c>.show()</c> tool to display exactly one hundred rows from
the dataset.
            </p>
        </task>
        <task>
            <p>
The code
<c>pizza_table.where("date","2015-02-01").show(10)</c>
allows you to view the first ten records of a pizza purchased on Feburary 1, 2015.
            </p>
            <p>
Display the first 20 pizza pies purchased on <m>\pi</m>-Day (that is, March 14, 2015).
            </p>
        </task>
        <task>
            <p>
You can filter by any column of the table by modifying the <c>where()</c> arguments.
Display the first 20 medium pizzas purchased in this parlor.
            </p>
        </task>
        <task>
            <p>
Display the first 20 <q>Mexicana</q> pizzas purchased in this parlor.
(Hint: make sure you filter the data based on how its string appears in the table.)
            </p>
        </task>
        <task>
            <p>
Chain two <c>where()</c>s and a <c>show()</c> together to display the first 20 large-sized veggie
pizzas purchased in this parlor.
            </p>
        </task>
        <task>
            <p>
Running <c>pizza_table.where("date","2015-07-22").sort("size").show()</c> displays the
large pizzas sold on July 22nd first, followed by medium, small, and extra-large
pizzas (in that order).
Running <c>pizza_table.where("date","2015-07-22").sort("size",descending=True).show()</c>
displays them in the order extra-large, small, medium, then large.
            </p>
            <p>
Write a sentence or two explaining why
you suspect the datascience library orders the pizzas in this way.
            </p>
        </task>
        <task>
            <p>
Display all the Hawaiian pizzas ordered on April 12, once in increasing order,
and once in descreaing order.
            </p>
        </task>
    </activity>
    <activity>
        <introduction>
            <p>
While it's great to have data already organized in a CSV, most data is not
already <term>parsed</term> for use directly by a data science library. Instead,
data scientists must manually and/or programmatically convert the raw data into
a suitable format.
            </p>
            <p>
In this activity, we will convert the text of a book in order to count
the number of times each of its main characters is mentioned in each chapter.
            </p>
        </introduction>
        <task>
            <p>
Save a plain-text copy of <em>Peter Pan</em> by J. M. Barrie as the file
<c>peterpan.txt</c> in the same folder as this notebook by using the link
<url href="https://www.gutenberg.org/ebooks/16"/>. This task may be confirmed by
running <c>f=open("peterpan.txt"); print(f.readline()); f.close()</c> in a Code cell.
                <aside>
This book is in the public domain, so it's perfectly legal to download a copy for free
from the internet. (The same is not true of the Disney animiated film however!)
                </aside>
            </p>
        </task>
        <task>
            <p>
Open the file and manually delete the header and footer information, so the text
file begins at the start of <q>Chapter 1</q> and ends with the words <q>THE END</q>.
Re-run <c>print(open("peterpan.txt").readline())</c>, and you should see the line
<c>Chapter 1 PETER BREAKS THROUGH</c>.
            </p>
        </task>
        <task>
            <p>
Fix the code in <xref ref="visualization-tables-text-to-table"/> to save the
chapters of the book to a <c>datascience</c> table.
            </p>
            <listing xml:id="visualization-tables-text-to-table">
                <caption>Import book text to a table</caption>
                <program language="python">
                    <input><xi:include href="../files/visualization-tables-text-to-table.py" parse="text" /></input>
                </program>
            </listing>
        </task>
        <task>
            <p>
The code in <xref ref="visualization-tables-count-characters"/> counts how many
times Peter Pan is mentioned in each chapter of the book.
Extend this code to also count how many times the Darling siblings
Wendy, Michael, and John are mentioned in each chapter.
            </p>
            <listing xml:id="visualization-tables-count-characters">
                <caption>Counting how many times each character is mentioned</caption>
                <program language="python">
                    <input><xi:include href="../files/visualization-tables-count-characters.py" parse="text" /></input>
                </program>
            </listing>
        </task>
        <task>
            <p>
Sort this table to find the chapter where Wendy is mentioned the most, and the chapter where
she is mentioned the least.
            </p>
        </task>
    </activity>
    <exercises>
        <exercise>
            <statement>
                <p>
Repeat the necesary steps from the class activities in order to make <c>pizza_table</c>
and <c>book_table</c> available for these exercises. Then run <c>pizza_table.show(10)</c>
and <c>book_table.show(10)</c> to confirm.
                </p>
            </statement>
        </exercise>
        <exercise>
            <statement>
How many extra-extra-large pizzas were sold by the pizzeria represented by <c>pizza_table</c>?
            </statement>
        </exercise>
        <exercise>
            <statement>
                <p>
Display all the <q>green garden</q> pizzas purchased on October 1st.
                </p>
            </statement>
        </exercise>
        <exercise>
            <statement>
                <p>
Display all the pizzas sold on February 14th, sorted from most to least expensive.
                </p>
            </statement>
        </exercise>
        <exercise>
            <statement>
                <p>
Update <c>book_table</c> to include how frequently Tinker Bell is mentioned. (Note that
she is often referred to as simply <q>Tink</q>.)
                </p>
            </statement>
        </exercise>
        <exercise>
            <statement>
                <p>
DIsplay <c>book_table</c> sorted by how frequently Tinker Bell is mentioned, and confirm that she is
most often mentioned in Chapter 3 (<m>22</m> times).
                </p>
            </statement>
        </exercise>
    </exercises>
</section>

