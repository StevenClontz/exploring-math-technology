<?xml version="1.0" encoding="UTF-8" ?>

<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="visualization-tables" kernel="python">
    <title>Tables</title>
    <exploration xml:id="visualization-tables-preview">
        <introduction>
            <p>
One of the important features of Python for programmers (and SageMath for mathematicians)
is its extensive <q>standard library</q>: that is, a lot of features are available by
default in the language without installing additional programs.
            </p>
            <p>
However, since different people use Python for different applications, not every feature
can be made availble by default. There are several libraries available in Python for
data science, but we will use one specifically developed for students called, well,
<url href="http://data8.org/datascience/"><c>datascience</c></url>.
            </p>
        </introduction>
        <task>
            <p>
Copy the contents of <xref ref="visualization-tables-import-datascience" /> into a Code cell
and follow its instructions to install <c>datascience</c> if it is not already available,
then re-run the Code cell.
You will only need to do this process once per project.
            </p>
            <listing xml:id="visualization-tables-import-datascience">
                <caption>Install and import <c>datascience</c></caption>
                <program language="python">
                    <input><xi:include href="../files/visualization-tables-import-datascience.py" parse="text" /></input>
                </program>
            </listing>
        </task>
        <task>
            <p>
To confirm that you can create <c>datascience</c> tables,
copy-paste the contents of <xref ref="visualization-tables-test" /> into a Code cell
to display a nicely formatted table of (incomplete) Scrabble tile data.
            </p>
            <listing xml:id="visualization-tables-test">
                <caption>Try out <c>datascience</c></caption>
                <program language="python">
                    <input>Table().with_columns([
    'letter', ['a', 'b', 'c', 'z'],
    'count',  [  9,   3,   3,   1],
    'points', [  1,   2,   2,  10],
])</input>
                </program>
            </listing>
        </task>
    </exploration>
    <activity>
        <introduction>
            <p>
As previously investigated, dictionaries can be used to describe
complex data with many different properties. In <xref ref="visualization-tables-dictionary-list" />
a list of dictionaries is used to describe several students in standard Python.
            </p>
            <listing xml:id="visualization-tables-dictionary-list">
                <caption>A list of student dictionaries</caption>
                <program language="python">
                    <input><xi:include href="../files/visualization-tables-dictionary-list.py" parse="text" /></input>
                </program>
            </listing>
        </introduction>
        <task>
            <p>
Copy this list into a Code cell, and add data for a fourth student to the list.
            </p>
        </task>
        <task>
            <p>
Data is often stored in a spreadsheet or database
as a <term>table</term>. An illustration of this is given in <xref ref="visualization-tables-student-table" />.
            </p>
            <table xml:id="visualization-tables-student-table">
                <title>Student data table</title>
                <tabular>
                    <row bottom="minor">
                        <cell>Name</cell>
                        <cell>Age</cell>
                        <cell>Favorite Teacher</cell>
                    </row>
                    <row>
                        <cell>Julia</cell>
                        <cell>17</cell>
                        <cell>Mr. Fullinwider</cell>
                    </row>
                    <row>
                        <cell>Jessica</cell>
                        <cell>19</cell>
                        <cell>Dr. Clontz</cell>
                    </row>
                    <row>
                        <cell>Lynn</cell>
                        <cell>18</cell>
                        <cell>Ms. Gilbreath</cell>
                    </row>
                </tabular>
            </table>
            <p>
Tables can be created programmatically by using the technique from <xref ref="visualization-tables-preview" />
or by modifying <xref ref="visualization-tables-from-rows" />.
            </p>
            <listing xml:id="visualization-tables-from-rows">
                <caption>Table from rows</caption>
                <program language="python">
                    <input><xi:include href="../files/visualization-tables-from-rows.py" parse="text" /></input>
                </program>
            </listing>
            <p>
Copy <xref ref="visualization-tables-from-rows" /> to a Code cell and insert the student data you created
in the previous task.
            </p>
        </task>
        <task>
            <p>
Since data usually isn't hard-coded into a script, but instead entered by folks who may not be programmers
into a spreadsheet or similar file, we will need a way to read external files containing data.
            </p>
            <p>
Open a spreadsheet application such as Microsoft Excel or Google Sheets. Copy the table of data displayed
in the previous task and paste it into your spreadsheet.
            </p>
            <p>
Save the spreadsheet to a Comma-Separated Values file named <c>student_data.csv</c> and use the
<kbd>(+) New</kbd> menu to upload it to CoCalc in the same folder as this Jupyter notebook.
            </p>
            <p>
Finally, create a Code cell with the line
<c>Table.read_table('student_data.csv')</c>
to check that your CSV data can be imported into a <c>datascience</c> table.
            </p>
        </task>
        <task>
            <p>
Visit the website <url href="https://vincentarelbundock.github.io/Rdatasets/datasets.html" /> to get a
CSV with the transactions for a (fictional) pizza parlor for the year 2015. (Hint: Use <kbd>Ctrl</kbd>+<kbd>F</kbd>
to search for <q>pizza</q>.) Rather than downloading it, right-click and copy the URL to the CSV file.
            </p>
            <p>
Import this data directly by entering
<c>Table.read_table("https://example.com/fix/this/url/to/point/to/your/data.csv")</c>
into a Code cell, replacing the string with the URL you copied. (Note that while there are almost
fifty thousand transactions in this dataset, only a few are displayed by default.
<xref ref="visualization-tables-pizza" /> gives the first three rows.)
            </p>
<table xml:id="visualization-tables-pizza">
  <title>The first three rows of pizza transaction data</title>
  <tabular>
    <row bottom="minor">
      <cell>
        Unnamed: 0
      </cell>
      <cell>
        id
      </cell>
      <cell>
        date
      </cell>
      <cell>
        time
      </cell>
      <cell>
        name
      </cell>
      <cell>
        size
      </cell>
      <cell>
        type
      </cell>
      <cell>
        price
      </cell>
    </row>
    <row>
      <cell>
        1
      </cell>
      <cell>
        2015-000001
      </cell>
      <cell>
        2015-01-01
      </cell>
      <cell>
        11:38:36
      </cell>
      <cell>
        hawaiian
      </cell>
      <cell>
        M
      </cell>
      <cell>
        classic
      </cell>
      <cell>
        13.25
      </cell>
    </row>
    <row>
      <cell>
        2
      </cell>
      <cell>
        2015-000002
      </cell>
      <cell>
        2015-01-01
      </cell>
      <cell>
        11:57:40
      </cell>
      <cell>
        classic_dlx
      </cell>
      <cell>
        M
      </cell>
      <cell>
        classic
      </cell>
      <cell>
        16
      </cell>
    </row>
    <row>
      <cell>
        3
      </cell>
      <cell>
        2015-000002
      </cell>
      <cell>
        2015-01-01
      </cell>
      <cell>
        11:57:40
      </cell>
      <cell>
        mexicana
      </cell>
      <cell>
        M
      </cell>
      <cell>
        veggie
      </cell>
      <cell>
        16
      </cell>
    </row>
  </tabular>
</table>
        </task>
    </activity>
</section>

