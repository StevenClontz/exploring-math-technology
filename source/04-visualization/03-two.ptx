<?xml version="1.0" encoding="UTF-8" ?>
<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="visualization-two" kernel="python">
    <title>Two-variable Visualizations</title>
    <exploration xml:id="visualization-two-preview">
        <statement>
            <p>
Plot the <m>xy</m> coordinates in the following table as points on a coordinate plane.
            </p>
<table>
    <tabular>
        <row bottom="minor">
<cell><m>x</m></cell>
<cell><m>y</m></cell>
        </row>
        <row>
<cell>1</cell>
<cell>10</cell>
        </row>
        <row>
<cell>2</cell>
<cell>9</cell>
        </row>
        <row>
<cell>3</cell>
<cell>7</cell>
        </row>
        <row>
<cell>5</cell>
<cell>4</cell>
        </row>
        <row>
<cell>6</cell>
<cell>6</cell>
        </row>
        <row>
<cell>6</cell>
<cell>4</cell>
        </row>
        <row>
<cell>7</cell>
<cell>3</cell>
        </row>
    </tabular>
            </table>
            <p>
Suppose <m>x</m> measures for the number of days a student has been absent from class,
and <m>y</m> represents their score on a quiz out of <m>10</m>. What conclusion might
you draw from the table of data? What about the points you drew in the coordinate plane?
Write a sentence or two summarizing your thoughts.
            </p>
        </statement>
    </exploration>
    <activity>
        <introduction>
            <p>
Often data scientists need to consider data where each item has two properties.
When one property is a category, and the other is numerical, a <term>bar chart</term>
is often the right tool for the job.
            </p>
        </introduction>
        <task>
            <p>
Repeat the steps from previous sections to get a copy of <c>pizza_table</c> available
for this notebook.
            </p>
        </task>
        <task>
            <p>
The table in <xref ref="visualization-two-type-count-0620"/> describes how many pizzas
of each type (Chicken, Classic, Supreme, Veggie) were sold on June 20th.
            </p>
<table xml:id="visualization-two-type-count-0620">
    <title>Pizzas sold on Jun 20, by type</title>
    <tabular>
        <row bottom="minor">
<cell>Type</cell>
<cell>Count</cell>
        </row>
        <row>
<cell>Chicken</cell>
<cell>31</cell>
        </row>
        <row>
<cell>Classic</cell>
<cell>42</cell>
        </row>
        <row>
<cell>Supreme</cell>
<cell>28</cell>
        </row>
        <row>
<cell>Veggie</cell>
<cell>27</cell>
        </row>
    </tabular>
            </table>
            <p>
This table was created by running
<c>june20_pizzas = pizza_table.where("date","2015-06-20").group("type")</c>
and <c>june20_pizzas.show()</c>. Modify this code to create the table
<c>may18</c> for May 18th instead, and show the result.
            </p>
        </task>
        <task>
            <p>
The bar chart in <xref ref="visualization-two-barchart-0620"/> visualizes
the amounts of each pizza type sold on June 20. Each category (in this case,
the type of pizza)
is listed on the vertical axis, and the size of the bar in the horizontal direction
represents each numerical value.
            </p>
            <figure xml:id="visualization-two-barchart-0620">
                <caption>Pizzas sold on June 20 by type</caption>
                <image source="images/visualization-two-barchart-0620.png"/>
            </figure>
            <p>
Create a similar bar chart by hand for the May 18th table you
displayed in the previous task. (Note: you'll need to run <c>import matplotlib</c>
and <c>%matplotlib inline</c> first to display any visualizations.)
            </p>
        </task>
        <task>
            <p>
Python <c>datatables</c> can produce bar charts; the code <c>june20.barh("types")</c>
was used to produce <xref ref="visualization-two-barchart-0620"/>. Adapt this line of
code to generate a bar chart for the May 18th data instead.
            </p>
        </task>
        <task>
            <p>
The code
<c>pizza_table.where("date","2015-06-20").select("type","price").group("type",sum)</c>
captures the total sales for each type of pizza sold on June 20th.
            </p>
            <p>
Generate a bar chart visualizing the total sales for each type of pizza sold on May 18th.
            </p>
        </task>
    </activity>
    <activity>
        <introduction>
            <p>
The <term>line chart</term> is a useful tool to visualize how data changes over time.
            </p>
        </introduction>
        <task>
            <p>
Right now, the <c>date</c> for each pizza sold is stored as a string of numbers and hyphens,
such as <c>"2015-08-19"</c>.
The code in <xref ref="visualization-two-parse-dates"/> provides a <c>datetime</c> column with
values that Python understands better. (This is another example of <q>cleaning</q> data for
analysis.)
            </p>
            <listing xml:id="visualization-two-parse-dates">
                <caption>Script to add <c>datetime</c> values</caption>
                <program language="python">
                    <input><xi:include href="../files/visualization-two-parse-dates.py" parse="text" /></input>
                </program>
            </listing>
            <p>
Use this script to update your <c>pizza_table</c>.
Show twenty rows of the resulting table below to confirm that it has both a <c>date</c> column
(which stores strings) and a <c>datetime</c> column (which stores datetimes).
            </p>
        </task>
        <task>
            <p>
The code in <xref ref="visualization-two-line-chart"/> displays the total number of pizzas
sold each day of 2015 as the line chart given in <xref ref="visualization-two-linechart-figure"/>.
            </p>
            <listing xml:id="visualization-two-line-chart">
                <caption>Displaying a line chart counting pizzas sold</caption>
                <program language="python">
                    <input><xi:include href="../files/visualization-two-line-chart.py" parse="text" /></input>
                </program>
            </listing>
            <figure xml:id="visualization-two-linechart-figure">
                <caption>Amount of pizza sold by date</caption>
                <image source="images/visualization-two-linechart.png"/>
            </figure>
            <p>
Write a sentence describing the approximate time of year when the pizza
parlor's best day of sales occurred, and how you determined this from the line chart.
            </p>
        </task>
        <task>
            <p>
Copy <xref ref="visualization-two-line-chart"/> into a new Code cell, but modify
<c>.group("datetime")</c> so that instead of showing the number of pizzas sold each day,
the total (sum) of sales for each day are shown in the line chart instead.
            </p>
        </task>
    </activity>
    <activity>
        <introduction>
            <p>
<term>Scatter plots</term> are often used to compare two numerical values throughout a dataset
to determine if they have a relationship.
            </p>
        </introduction>
        <task>
            <p>
Create a table called <c>testing_table</c> populated with the <q>Math Placement Exam Results</q>
dataset found at <url href="https://vincentarelbundock.github.io/Rdatasets/datasets.html"/>.
This dataset describes the mathematics testing results from several freshmen students at a
liberal arts college, including SAT, ACT, and the college's internal
math placement exam results.
            </p>
            <p>
Show the first ten rows of this table.
            </p>
        </task>
        <task>
            <p>
You'll see many <q>Not a Number</q> <c>nan</c> values in this table for when data was not
available. To clean this data for analysis, you should remove these records as needed
by only using values that are positive.
            </p>
            <p>
Use <c>from datascience.predicates import are</c> and <c>.where(column_name,are.above(0))</c>
to, show the first ten rows of this table that don't have a <c>nan</c> score for SAT math scores.
            </p>
        </task>
        <task>
            <p>
The script in <xref ref="visualization-two-scatter"/> results in a scatter plot. Each dot represents
a different student's SAT Math score (by its horizontal position) with their college math placement
score (by its vertical position). Note that scores of <c>nan</c> and other non-positive results are
ignored.
            </p>
            <listing xml:id="visualization-two-scatter">
                <caption>Displaying a scatter plot of test scores.</caption>
                <program language="python">
                    <input><xi:include href="../files/visualization-two-scatter.py" parse="text" /></input>
                </program>
            </listing>
            <figure xml:id="visualization-two-scatter-figure">
                <caption>Scatter plot comparing SAT and math placement scores</caption>
                <image source="images/visualization-two-scatter.png"/>
            </figure>
            <p>
Run a modified copy of this script in a Code cell to display a scatter plot
that compares ACT Math scores with college math placement scores.
            </p>
        </task>
        <task>
            <p>
When two values of data are <term>correlated</term> (that is, possibly influenced by one another),
this correlation is often apparent when visualized in a scatter plot.
            </p>
            <p>
Do you think SAT Math scores and correlated with this college's math placement exam results?
What about ACT Math scores? Write a few sentences explaining why or why not.
            </p>
        </task>
        <task>
            <p>
Suppose you heard someone claim that this college's math placement score doesn't measure
mathematical ability, but instead only reflects the size of each student's high school.
            </p>
            <p>
Show a scatter plot comparing the size of each student's high school with their math placement score.
Then write a sentence or two explaining whether you agree with this claim or not, based on
the scatter plot.
            </p>
        </task>
        <task>
            <p>
Suppose you heard someone claim that students shouldn't have to take a math placement test
once they come to this college, and SAT or ACT socres should be used instead.
Based on the scatter plots above, would you agree or disagree with that
statement? Write a few sentences explaining your reasoning.
            </p>
        </task>
    </activity>
</section>

