<?xml version="1.0" encoding="UTF-8" ?>

<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="data-numbers" kernel="sage">
    <title>Numbers and Strings</title>
    <exploration>
        <introduction>
            <p>Write a sentence answering each question.</p>
        </introduction>
<!--        <task>
            <p>
Which number is bigger: <m>0.999\cdots</m> (with infinitely-many <m>9</m>s)
or <m>1</m>? Why do you think so?
            </p>
        </task>
        <task>
            <p>
What does <m>0.999\cdots</m> mean?
            </p>
        </task>
        <task>
            <p>
What does <m>1</m> mean?
            </p>
        </task>-->
        <task>
            <p>
How would you define a <q>number</q>?
            </p>
        </task>
        <task>
            <p>
Given your definition, are there certain numbers that cannot be understood by a computer?
            </p>
        </task>
    </exploration>
    <activity xml:id="data-numbers-counting">
        <introduction>
            <p>
The <term>counting numbers</term> (sometimes written as the lowercase Greek
letter omega <m>\omega</m>, also sometimes called
<q>whole numbers</q> or <q>natural numbers</q>) are those numbers used to
quantify whole items: <me>\{0,1,2,3,\dots,100,101,\dots,8675309,8675310,\dots\}</me>
            </p>
            <p>
For each of the following possible rules for counting numbers, either decide that
it is true, or explain when the rule might fail.
            </p>
        </introduction>
        <task>
            <p>
Adding one to a counting number results in another counting number. For example,
<m>6</m> is a counting number, so <m>6+1=7</m> is also a counting number.
            </p>
        </task>
        <task>
            <p>
Subtracting one from a counting number results in another counting number. For example,
<m>6</m> is a counting number, so <m>6-1=5</m> is also a counting number.
            </p>
        </task>
        <task>
            <p>
Doubling a counting number results in another counting number. For example,
<m>32</m> is a counting number, so <m>32\times 2=64</m> is also a counting number.
            </p>
        </task>
        <task>
            <p>
Halving a counting number results in another counting number. For example,
<m>32</m> is a counting number, so <m>32\div 2=16</m> is also a counting number.
            </p>
        </task>
        <task>
            <p>
Squaring a counting number results in another counting number. For example,
<m>9</m> is a counting number, so <m>9^2=81</m> is also a counting number.
            </p>
        </task>
        <task>
            <p>
Square rooting a counting number results in another counting number. For example,
<m>9</m> is a counting number, so <m>\sqrt{9}=3</m> is also a counting number.
            </p>
        </task>
    </activity>
    <activity>
        <introduction>
            <p>
The <term>integers</term> <m>\mathbb Z</m> include all the counting numbers as well as their
negatives: <m>\{\dots,-2,-1,0,1,2,\dots\}</m>.
            </p>
        </introduction>
        <task>
            <p>
Explain which of the number rules from <xref ref="data-numbers-counting"/> work
when <q>counting number</q> is replaced with <q>integer</q>, and which ones fail.
            </p>
        </task>
        <task>
            <p>
Choose from the words all/some/no to make the following sentence correct.
            </p>
            <blockquote>
All/some/no integers are also counting numbers, and all/some/no counting numbers are also integers.
            </blockquote>
        </task>
    </activity>
    <activity>
        <introduction>
            <p>
The <term>rational numbers</term> <m>\mathbb Q</m> include all fractions of integers
that don't divide by zero, such as <m>\frac{1}{2}</m>, <m>\frac{22}{7}</m>,
and <m>-\frac{1234812348}{42}</m>.
            </p>
        </introduction>
        <task>
            <p>
Explain which of the number rules from <xref ref="data-numbers-counting"/> work
when <q>counting number</q> is replaced with <q>rational number</q>, and which ones fail.
            </p>
        </task>
        <task>
            <p>
Choose from the words all/some/no to make the following sentence correct.
            </p>
            <blockquote>
All/some/no integers are also rational numbers, and all/some/no rational numbers are also integers.
            </blockquote>
        </task>
    </activity>
    <activity>
        <statement>
            <p>
There are other kinds of <term>real numbers</term>, such as <m>e</m> and <m>\pi</m>, that aren't
rational. (The technical definition of the system of real numbers requires experience with
calculus, so we won't get into that here.) There are other kinds of numbers as well,
such as the <term>complex numbers</term> explorered in <xref ref="complex"/>.
            </p>
            <p>
Since SageMath tries to model mathematics as authentically as possible, it will try to recognize
when you are working with integers or rational numbers. For example, <c>type(-17/3)</c>
display that it is a <q><c>sage.rings.rational.Rational</c></q>
            </p>
            <p>
Use the <c>type()</c> tool to help explain why <m>-\frac{1234812348}{42}</m> is an integer or
rational number.
            </p>
        </statement>
    </activity>
    <activity>
        <introduction>
            <p>
Something all these sets of numbers described above is that they are <term>infinite</term>:
if you had a finite list of them, take the biggest and add one, and you'll have something
you forgot in your list.
            </p>
            <p>
While SageMath does its best to hide this limitation from users,
having finitely-many possible numbers is not ideal for data intended
for storage on a physical computer.
To account for this, some lower-level languages offer data types like the <term>short</term>
that account for a useful (but finite) range of integers.
In particular, shorts are integers that may be stored as a short finite list of the
binary digits <m>0</m> and <m>1</m>. (Each binary digit is also known as a <term>bit</term>.)
            </p>
        </introduction>
        <task>
            <p>
Only two numbers may be described using one binary digit: <m>0_2</m> and <m>1_2</m>.
Only four numbers may be described using two binary digits: <m>00_2</m>, <m>01_2</m>, <m>10_2</m>, and <m>11_2</m>.
            </p>
            <p>
Describe all the possible numbers using three binary digits.
            </p>
            <me>\square\square\square_2</me>
        </task>
        <task>
            <p>
What do you notice about this pattern? According to this pattern, how many numbers
do you expect can be described using four binary digits? Five digits?
            </p>
        </task>
        <task>
            <p>
A <term>byte</term> of computer storage is eight binary digits. How many different values of data
can be stored in a byte?
            </p>
        </task>
        <task>
            <p>
How many different numbers can be stored as a short data type that uses two bytes?
            </p>
        </task>
    </activity>
    <activity>
        <introduction>
            <p>
Since ultimately data is stored as bits, anything handled by a computer needs to be represented
somehow as a (binary) number. For example, a <term>character</term> is a letter or other glyph
(such as an emoji ðŸ˜ƒ) that has a unique representation as a counting number.
            </p>
        </introduction>
        <task>
            <p>
To denote a character in Python or SageMath, surround it with either single quotes <c>'x'</c>
or double quotes <c>"x"</c>. Then the code <c>ord('x')</c> (or <c>ord("x")</c>) will reveal
the number that is used to represent it in memory (for <c>x</c>, that number is <m>120</m>),
called a <term>Unicode value</term>.
            </p>
            <p>
Find the Unicode values for the characters <c>s</c>, <c>S</c>, and <c>ðŸ˜Š</c>.
(For the emoji, you may wish to copy-and-paste the character if you're using a standard keyboard.)
            </p>
        </task>
        <task>
            <p>
Given a Unicode value, Python and SageMath can return the character it represents by using
the <c>chr()</c> tool. For example, <c>print(chr(120))</c> displays <c>x</c> as expected.
            </p>
            <p>
Use <c>chr()</c> to display the charcters with these Unicode values:
            </p>
            <ul>
                <li>89</li>
                <li>97</li>
                <li>121</li>
                <li>13025</li>
            </ul>
        </task>
        <task>
            <p>
<term>Strings</term> of multiple characters may be used to represent words and sentences.
Displaying the string <c>test = "Hello World!"</c> is a common test used in setting up a new programming
environment, done with <c>print(test)</c>.
            </p>
            <p>
The value of a CS variable may be easily inserted into a string by using <term>interpolation</term>.
In updated versions of Python 3 and SageMath, this is done by typing an <c>f</c> before the quotation marks:
<c>print(f"It's time to say {test} now.")</c> will display <c>It's time to say Hello World! now.</c>
(provided <c>test = "Hello World!"</c> was executed previously).
            </p>
            <p>
Store the word <q>math</q> as a CS variable, then use interpolation to make it appear instead of the blank
when running a Code cell with <c>print("My favorite class is ____.")</c>.
            </p>
        </task>
        <task>
            <p>
Use string interpolation to replace the blank in the line <c>print("The character ___ has Unicode value 42+42.")</c>
            </p>
        </task>
    </activity>
    <exercises>
        <exercise>
            <statement>
            <p>
Is <m>-1.5</m> a counting number, integer, and/or rational number?
            </p>
            </statement>
        </exercise>
        <exercise>
            <statement>
            <p>
Is <m>+1.5</m> a counting number, integer, and/or rational number?
            </p>
            </statement>
        </exercise>
        <exercise>
            <statement>
            <p>
Is <m>-15</m> a counting number, integer, and/or rational number?
            </p>
            </statement>
        </exercise>
        <exercise>
            <statement>
            <p>
Is <m>+15</m> a counting number, integer, and/or rational number?
            </p>
            </statement>
        </exercise>
        <exercise>
            <statement>
            <p>
A <term>nibble</term> of computer storage uses four bits (binary digits). How many different values of data
can be stored in a nibble?
            </p>
            </statement>
        </exercise>
        <exercise>
            <statement>
            <p>
How many bytes equals twelve nibbles?
            </p>
            </statement>
        </exercise>
        <exercise>
            <statement>
            <p>
A <term>float</term> data type is one used to store fractions using binary numbers. A simple float
might use the following two bytes of data...
            </p>
            <cd>01101101 11111100</cd>
            <p>
... to represent the following rational number.
            </p>
            <me>01101101_2 \times 2^{11111100_2-256}</me>
            <p>
Show how to verify that this float represents the decimal value <m>6.8125</m>.
(Remember that the value of <m>01101101_2</m> may be calculated automatically
by running <c>int('01101101',2)</c> in either Python or SageMath.)
            </p>
            </statement>
        </exercise>
        <exercise>
            <statement>
            <p>
Importantly, in the float implementation described by the previous exercise, a leading <c>1</c> in either byte
requires subtracting the value <m>256</m> from the usual binary value (in order to support negative values).
            </p>
            <p>
Use this rule to verify that this implementation might store the decimal <m>-0.265625</m> as <c>11101111 11111010</c>.
            </p>
            </statement>
        </exercise>
<!--        <exercise>
            <statement>
            <p>
This float implementation is non-unique since the number <m>2</m> may be represented by both
<c>00000010 00000000</c> and <c>00000001 00000001</c>.
            </p>
            </statement>
        </exercise>-->
        <exercise>
            <statement>
                <p>
Use string interpolation along with <c>chr()</c> and <c>ord()</c>
to replace the blanks in the following lines of code with sensible output.
                </p>
                <cd>print("The Unicode value of the @ character is ___.")
print("The Unicode value of the emoji ___ is 128525.")</cd>
            </statement>
        </exercise>
    </exercises>
</section>

