<?xml version="1.0" encoding="UTF-8" ?>

<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="data-programming" jupyter-kernel="python">
    <title>Programming with Data</title>
    <exploration>
        <introduction>
            <p>
Consider the following code that prints out the first ten square counting numbers.
            </p>
            <listing>
                <caption>Ten square counting numbers</caption>
                <program language="python">
                    <input><xi:include parse="text" href="../files/data-programming-squaring-manually.py" /></input>
                </program>
            </listing>
        </introduction>
        <task>
            <p>
Copy this program into a code cell, and modify it to print out the squares from 0 to 14.
            </p>
        </task>
        <task>
            <p>
Write a sentence about what you notice about the provided code. What do you think could be improved
to make this code more elegant?
            </p>
        </task>
    </exploration>
    <activity>
        <introduction>
            <p>
Usually you will want to not only store collections of data, but <em>do</em> something with
each datum. A <term>for loop</term> allows you to deal with data piece-by-piece.
            </p>
        </introduction>
        <task>
            <p>
Save the following numbers as a list named <c>favorite_numbers</c>.
            </p>
            <me>18, 7, -7, -\frac{7}{2}, 9, \frac{17}{4}, 0, -17, 19, 3</me>
        </task>
        <task>
            <p>
Adapt the partial example shown in <xref ref="data-programming-favorite-loop"/> to display
output similar to <xref ref="data-programming-favorite-output"/> for each number.
            </p>
            <sidebyside widths="45% 45%">
                <listing xml:id="data-programming-favorite-loop">
                    <caption>Looping over a list of numbers</caption>
                    <program language="python">
                        <input><xi:include parse="text" href="../files/data-programming-favorite-loop.py" /></input>
                    </program>
                </listing>
                <listing xml:id="data-programming-favorite-output">
                    <caption>Sample output for each number</caption>
                    <cd><xi:include parse="text" href="../files/data-programming-favorite-output.txt" /></cd>
                </listing>
            </sidebyside>
        </task>
        <task>
            <p>
To deal with pairs of data, for loops can also be <term>nested</term>.
Adapt the code shown in <xref ref="data-programming-nested-loops"/> to create output as
shown in <xref ref="data-programming-nested-output"/>.
            </p>
            <sidebyside widths="45% 45%">
                <listing xml:id="data-programming-nested-loops">
                    <caption>Nested for loops</caption>
                    <program language="python">
                        <input><xi:include parse="text" href="../files/data-programming-nested-loops.py" /></input>
                    </program>
                </listing>
                <listing xml:id="data-programming-nested-output">
                    <caption>Excerpt of desired output</caption>
                    <cd><xi:include parse="text" href="../files/data-programming-nested-output.txt" /></cd>
                </listing>
            </sidebyside>
        </task>
    </activity>
    <activity>
        <introduction>
            <p>
Often the way you want to deal with data is <term>conditional</term>, that is,
the code you want to run will depend on <em>if</em> a variable satisfies a certain
condition.
            </p>
        </introduction>
        <task>
            <p>
Paste the code in <xref ref="data-programming-conditional-money"/>
into three code cells, changing the value of <c>money_in_bank</c>
so that each cell outputs a different response.
            </p>
            <listing xml:id="data-programming-conditional-money">
                <caption>Conditional on amount of money</caption>
                <program language="python">
                    <input><xi:include parse="text" href="../files/data-programming-conditional-money.py" /></input>
                </program>
            </listing>
        </task>
        <task>
            <p>
Bugfix the code shown in <xref ref="data-programming-conditional-root"/>.
            </p>
            <listing xml:id="data-programming-conditional-root">
                <caption>Using conditionals inside loops</caption>
                <program language="python">
                    <input><xi:include parse="text" href="../files/data-programming-conditional-root.py" /></input>
                </program>
            </listing>
        </task>
    </activity>
    <activity>
        <statement>
            <p>
A common exercise in entry-level programming interviews is known as <q>FizzBuzz</q>.
Write a program that for each of the numbers <m>1</m> through <m>100</m>
prints that number, the word <q>Fizz</q> if that number is divisible by <m>3</m>,
and <q>Buzz</q> if that number is divisible by <m>5</m>. Example output
for the numbers <m>1</m> through <m>15</m> is given in
<xref ref="data-programming-fizzbuzz-output"/>.
            </p>
            <p>
The code in <xref ref="data-programming-fizzbuzz-scrambled"/> implements FizzBuzz
in Python, but the lines are out of order and missing indentation. Fix the code to
correctly display output as in <xref ref="data-programming-fizzbuzz-output"/>.
            </p>
            <sidebyside widths="45% 45%">
                <listing xml:id="data-programming-fizzbuzz-scrambled">
                    <caption>Scrambled FizzBuzz program</caption>
                    <program language="python">
                        <input><xi:include parse="text" href="../files/data-programming-fizzbuzz-scrambled.py" /></input>
                    </program>
                </listing>
                <listing xml:id="data-programming-fizzbuzz-output">
                    <caption>Beginning FizzBuzz output.</caption>
                    <cd><xi:include parse="text" href="../files/data-programming-fizzbuzz-output.txt"/></cd>
                </listing>
            </sidebyside>
        </statement>
    </activity>
    <exercises>
        <exercise>
            <statement>
                <p>
Use the code <c>from string import ascii_lowercase; letters = list(ascii_lowercase)</c>
to obtain a list of the lowercase English alphabet. Then <c>print(letters)</c> to display them
as the output of your code cell.
                </p>
            </statement>
        </exercise>
        <exercise>
            <statement>
                <p>
The line <c>for count,letter in enumerate(letters):</c> allows you to loop through
each letter in <c>letters</c> while also keeping count of where you are in the loop
(starting with the first counting number <m>0</m>).
                </p>
                <p>
Use <c>enumerate</c> to produce the output shown below.
                </p>
                <cd>Letter 0 is a.
Letter 1 is b.
[...]
Letter 25 is z.</cd>
            </statement>
        </exercise>
        <exercise>
            <statement>
                <p>
Copy your code from the previous exercise, and modify it using <c>ord(letter)</c>
to display the following output instead.
                </p>
                <cd>Letter 0 is a, which has Unicode value 97.
Letter 1 is b, which has Unicode value 98.
[...]
Letter 25 is z, which has Unicode value 122.</cd>
            </statement>
        </exercise>
        <exercise>
            <statement>
                <p>
<url href="https://scrabble.hasbro.com/en-us">Scrabble</url> is a
popular crossword-style game. Like most word games, deciding on what
word is best to play is often a mathematical exercise.
                </p>
                <p>
First, save <url href="https://raw.githubusercontent.com/zeisler/scrabble/master/db/dictionary.csv"/>
as the file <c>dictionary.csv</c> in the same folder as this notebook.
                </p>
                <p>
Then unscramble the code in <xref ref="data-programming-scrabble-scrambled"/> to
create nested loops that count the number of vowels used in each of the first
fifty words of the Scrabble dictionary.
                </p>
                <listing xml:id="data-programming-scrabble-scrambled">
                    <caption>Scrambled vowel-counting program</caption>
                    <program language="python">
                        <input><xi:include parse="text" href="../files/data-programming-scrabble-scrambled.py" /></input>
                    </program>
                </listing>
            </statement>
        </exercise>
        <exercise>
            <statement>
                <p>
Copy your code from the previous exercise, and then replace the <c>print</c>
line with an <c>if</c>/<c>elif</c>/<c>else</c> conditional to produce output similar to
<xref ref="data-programming-scrabble-conditional"/>.
                </p>
                <listing xml:id="data-programming-scrabble-conditional">
                    <caption>Conditional vowel-counting output</caption>
                    <cd><xi:include parse="text" href="../files/data-programming-scrabble-conditional.txt"/></cd>
                </listing>
            </statement>
        </exercise>
    </exercises>
</section>

