{"backend_state":"running","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":235700224},"metadata":{},"trust":true,"type":"settings"}
{"cell_type":"markdown","id":"013b81","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <div><b>d. </b></div>\n \n <span>\n \\(1000\\)\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":37,"type":"cell"}
{"cell_type":"markdown","id":"0a075b","input":"","metadata":{"editable":true},"pos":62,"type":"cell"}
{"cell_type":"markdown","id":"0b2bb1","input":"","metadata":{"editable":true},"pos":34,"type":"cell"}
{"cell_type":"markdown","id":"0c4e94","input":"","metadata":{"editable":true},"pos":47,"type":"cell"}
{"cell_type":"markdown","id":"10b90a","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <div><b>d. </b></div>\n \n <span>\nNow confirm that the sum of your best binary approximations of \\(\\frac{1}{10}\\) and \\(\\frac{1}{5}\\)\ndo not exactly add up to your best binary approximation of \\(\\frac{3}{10}\\).\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":63,"type":"cell"}
{"cell_type":"markdown","id":"1c6213","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <h3>\n Preview Activity 1.2.1</h3>\n \n\n</div>","metadata":{"editable":false},"pos":1,"type":"cell"}
{"cell_type":"markdown","id":"203a34","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <h3>\n Activity 1.2.4</h3>\n \n\n</div>","metadata":{"editable":false},"pos":41,"type":"cell"}
{"cell_type":"markdown","id":"224080","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <h3>\n Activity 1.2.5</h3>\n \n\n</div>","metadata":{"editable":false},"pos":52,"type":"cell"}
{"cell_type":"markdown","id":"29b465","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <span>\n \\[\\begin{align*}\\frac{1}{10} \\approx \\frac{\\square}{2}+\\frac{\\square}{4}+\\frac{\\square}{8}+\\frac{\\square}{16}+\\frac{\\square}{32} = 0.\\square\\square\\square\\square\\square_2\\\\\\frac{1}{5} \\approx \\frac{\\square}{2}+\\frac{\\square}{4}+\\frac{\\square}{8}+\\frac{\\square}{16}+\\frac{\\square}{32} = 0.\\square\\square\\square\\square\\square_2\\\\\\frac{3}{10} \\approx \\frac{\\square}{2}+\\frac{\\square}{4}+\\frac{\\square}{8}+\\frac{\\square}{16}+\\frac{\\square}{32} = 0.\\square\\square\\square\\square\\square_2\\\\\\end{align*}\\]\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":61,"type":"cell"}
{"cell_type":"markdown","id":"38a10e","input":"","metadata":{"editable":true},"pos":64,"type":"cell"}
{"cell_type":"markdown","id":"3bc949","input":"","metadata":{"editable":true},"pos":7,"type":"cell"}
{"cell_type":"markdown","id":"412f87","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <h3>\n Activity 1.2.3</h3>\n \n\n</div>","metadata":{"editable":false},"pos":26,"type":"cell"}
{"cell_type":"markdown","id":"4491fe","input":"","metadata":{"editable":true},"pos":49,"type":"cell"}
{"cell_type":"markdown","id":"525ee3","input":"","metadata":{"editable":true},"pos":25,"type":"cell"}
{"cell_type":"markdown","id":"564380","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <div><b>c. </b></div>\n \n <span>\nUse two Code cells to evaulate <tt>7/3</tt> and <tt>7//3</tt>.\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":8,"type":"cell"}
{"cell_type":"markdown","id":"608ed5","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <div><b>a. </b></div>\n \n <span>\n \\(28\\)\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":31,"type":"cell"}
{"cell_type":"markdown","id":"60bf46","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <span class=\"newcommands\" style=\"\n display:none;\n \">\\(\\newcommand{\\amp}{&}\\)</span>\n \n <h1>1.2Â The Python Kernel</h1>\n <div>\n <a href=\"\n https://TODO/programming-python.html\n \">\n https://TODO/programming-python.html\n </a>\n </div>\n \n\n</div>","metadata":{"editable":false},"pos":0,"type":"cell"}
{"cell_type":"markdown","id":"626b55","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <div><b>b. </b></div>\n \n <span>\nWithout using technology, find the exact values of each of the following sums.\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":56,"type":"cell"}
{"cell_type":"markdown","id":"6d36dd","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <span>\nExperiment using <tt>**</tt> and <tt>^</tt> with other numbers as well.\nThen write a sentence or two explaining how these expressions might\nhave been interpreted by the computer.\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":12,"type":"cell"}
{"cell_type":"markdown","id":"70d5ad","input":"","metadata":{"editable":true},"pos":10,"type":"cell"}
{"cell_type":"markdown","id":"71d686","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <span>\n \\[\\frac{2^{7-5}+7}{3\\times(1+4)}\\]\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":24,"type":"cell"}
{"cell_type":"markdown","id":"79bc79","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <div><b>d. </b></div>\n \n <span>\nEvaluate the expressions <tt>6**2</tt> and <tt>6^2</tt>.\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":11,"type":"cell"}
{"cell_type":"markdown","id":"7c4558","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <span>\nWhile <tt>10^3</tt> in writing might seem to refer to the number \\(10^3=1000\\),\nin many programming languages such as Python 3, the caret <tt>^</tt> instead refers to the\nbitwise XOR operation,\nwhich can be evaluated by hand using a variation of long addition on the\nbinary form of each number.\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":42,"type":"cell"}
{"cell_type":"markdown","id":"7c55e4","input":"","metadata":{"editable":true},"pos":38,"type":"cell"}
{"cell_type":"markdown","id":"84318e","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <span>\nLet's investigate why\n<tt>1/10+1/5</tt> isn't equal to <tt>3/10</tt> when evaluated in Python.\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":53,"type":"cell"}
{"cell_type":"markdown","id":"8717b1","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <div><b>a. </b></div>\n \n <span>\n \\[4-3(7)\\]\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":19,"type":"cell"}
{"cell_type":"markdown","id":"8c4d85","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <span>\nWhat do you notice?\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":58,"type":"cell"}
{"cell_type":"markdown","id":"9024b0","input":"","metadata":{"editable":true},"pos":4,"type":"cell"}
{"cell_type":"markdown","id":"97d54a","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <span>\nUse a <tt>Python 3</tt> kernel and\nthe addition <tt>+</tt>, subtraction <tt>-</tt>, multiplication <tt>*</tt>,\ndivision <tt>/</tt>, and exponentiation <tt>**</tt> operators to evaluate\nthe following mathematical expressions. Then check your result by computing\neach expression's value by hand.\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":18,"type":"cell"}
{"cell_type":"markdown","id":"9a7209","input":"","metadata":{"editable":true},"pos":32,"type":"cell"}
{"cell_type":"markdown","id":"9ba9e7","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <div><b>a. </b></div>\n \n <span>\nExplain why \\(0.33\\) is the best approximation of \\(\\frac{1}{3}\\) using two decimal places, and\nwhy \\(0.67\\) is the best approximation of \\(\\frac{2}{3}\\) using two decimal places.\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":54,"type":"cell"}
{"cell_type":"markdown","id":"9e1b7e","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <div><b>c. </b></div>\n \n <span>\nUse parentheses, <tt>(</tt> and <tt>)</tt>, to group expressions within\nmore complicated expressions as necessary.\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":23,"type":"cell"}
{"cell_type":"markdown","id":"9f5591","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <span>\n \\[\\begin{align*}125 \\amp= 1\\times 100 + 2\\times 10 + 5\\times 1\\\\\\amp= 1\\times 10^2 + 2\\times 10^1+ 5\\times 10^0\\\\\\amp= 1\\times 64 + 1\\times 32 + 1\\times 16 + 1\\times 8 + 1\\times 4 + 0\\times 2 + 1\\times 1\\\\\\amp= 1\\times 2^6 + 1\\times 2^5 + 1\\times 2^4 + 1\\times 2^3 + 1\\times 2^2 + 0\\times 2^1 + 1\\times 2^0\\\\\\amp= 1111101_2\\\\\\end{align*}\\]\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":29,"type":"cell"}
{"cell_type":"markdown","id":"a93200","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <span>\nUse a <tt>Python 3</tt> kernel for these tasks.\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":2,"type":"cell"}
{"cell_type":"markdown","id":"a9c4e3","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <span>\nWrite a sentence explaining why this result might be surprising.\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":15,"type":"cell"}
{"cell_type":"markdown","id":"a9d0e9","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <span>\nTherefore \\(10\\verb|^| 3=1001_2=9\\).\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":45,"type":"cell"}
{"cell_type":"markdown","id":"a9f1a9","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <div><b>a. </b></div>\n \n <span>\nBased on the above example, write a sentence guessing how the\n<tt>^</tt> operation works.\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":46,"type":"cell"}
{"cell_type":"markdown","id":"aa5c70","input":"","metadata":{"editable":true},"pos":51,"type":"cell"}
{"cell_type":"markdown","id":"ac654c","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <div><b>e. </b></div>\n \n <span>\nEvaluate the expression <tt>1/10 + 1/5</tt>.\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":14,"type":"cell"}
{"cell_type":"markdown","id":"ad0213","input":"","metadata":{"editable":true},"pos":40,"type":"cell"}
{"cell_type":"markdown","id":"ad05e2","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <span>\n \\[\\begin{align*}1+\\frac{1}{3}\\\\\\frac{2}{3}+\\frac{2}{3}\\\\1+0.33\\\\0.67+0.67\\\\\\end{align*}\\]\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":57,"type":"cell"}
{"cell_type":"markdown","id":"afd6e7","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <span>\n \\[\\begin{array}{r} 1010_2\\\\\\verb|^|\\hspace{1em} 0011_2\\\\\\hline 1001_2 \\end{array}\\]\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":44,"type":"cell"}
{"cell_type":"markdown","id":"b00062","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <div><b>b. </b></div>\n \n <span>\n \\(63\\)\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":33,"type":"cell"}
{"cell_type":"markdown","id":"ba2d14","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <div><b>e. </b></div>\n \n <span>\nRunning <tt>format(6.75,\"b\")</tt> will result in an error.\nBut considering that \\(2^{-1}=\\frac{1}{2}=0.5\\) and \\(2^{-2}=\\frac{1}{4}=0.25\\),\nhow might \\(6.75\\) be expressed as a binary number?\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":39,"type":"cell"}
{"cell_type":"markdown","id":"bc02c0","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <span>\nTry using <tt>/</tt>\nand <tt>//</tt> with other numbers to explore.\nThen use a Markdown cell to write a sentence or two explaining\nhow these results are different.\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":9,"type":"cell"}
{"cell_type":"markdown","id":"bd14f6","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <div><b>b. </b></div>\n \n <span>\n \\[3^2+4^2\\]\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":21,"type":"cell"}
{"cell_type":"markdown","id":"c1b535","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <span>\nIf you get a <tt>TypeError</tt>, use the <tt>*</tt> operator to do\nthe multiplication instead.\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":6,"type":"cell"}
{"cell_type":"markdown","id":"c551b7","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <div><b>b. </b></div>\n \n <span>\nUse a Code cell to compute \\(11(12)\\).\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":5,"type":"cell"}
{"cell_type":"markdown","id":"c8c035","input":"","metadata":{"editable":true},"pos":16,"type":"cell"}
{"cell_type":"markdown","id":"c9fc2e","input":"","metadata":{"editable":true},"pos":36,"type":"cell"}
{"cell_type":"markdown","id":"ce0ef2","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <div><b>c. </b></div>\n \n <span>\nJust like \\(\\frac{1}{3}\\) cannot be expressed exactly using\na finite number of base-10 digits, fractions like \\(\\frac{1}{10}\\) cannot be\ndescribed exactly using a finite number of base-2 digits. Replace\neach \\(\\square\\) below with a \\(0\\) or \\(1\\) to create\nthe best binary approximation you can.\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":60,"type":"cell"}
{"cell_type":"markdown","id":"d16094","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <span>\nUse <tt>format(n,\"b\")</tt> to have Python display the binary form of each of the following\npositive integers (replacing <tt>n</tt> with the value of each integer). Then check that\nthe binary form is valid by adding up appropriate powers of two as shown above.\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":30,"type":"cell"}
{"cell_type":"markdown","id":"de5e9a","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <h3>\n Activity 1.2.2</h3>\n \n\n</div>","metadata":{"editable":false},"pos":17,"type":"cell"}
{"cell_type":"markdown","id":"dfa0b5","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <span>\nComputers generally store numerical data using binary\nor base-2: sequences of \\(0\\)s and \\(1\\)s.\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":27,"type":"cell"}
{"cell_type":"markdown","id":"dfe396","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <div><b>a. </b></div>\n \n <span>\nUse a Code cell to compute \\(95+87\\).\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":3,"type":"cell"}
{"cell_type":"markdown","id":"e27b2e","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <span>\n \\[10 \\verb|^| 3 = 1010_2 \\verb|^| 0011_2\\]\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":43,"type":"cell"}
{"cell_type":"markdown","id":"e32c71","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <div><b>b. </b></div>\n \n <span>\nTest your rule by using it with a few combinations of small numbers (less than 16),\nusing <tt>format(n,'b')</tt> and <tt>x^y</tt> in Code cells to help you as needed.\nIf necessary, correct your guess above based upon this experiementation.\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":48,"type":"cell"}
{"cell_type":"markdown","id":"e37a3c","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <span>\nJust like base-10 numbers describe values in terms of powers of\nten, binary numbers describe values using powers of two.\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":28,"type":"cell"}
{"cell_type":"markdown","id":"e49718","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <div><b>c. </b></div>\n \n <span>\nWhat happens to <tt>42</tt> if you apply <tt>^11</tt> to it twice, as in <tt>42^11^11</tt>?\nIs there anything special about the numbers \\(42\\) or \\(11\\) that made this happen?\nWrite a short paragraph on how this effect might be used to create a simple encryption.\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":50,"type":"cell"}
{"cell_type":"markdown","id":"e69bc9","input":"<div class=\"not-editable\" style=\" background-color:#f8f8f8;padding:1em;border-radius:10px;box-shadow:4px 4px 3px #ddd;margin:5px; \">\n\n\n <div><b>c. </b></div>\n \n <span>\n \\(493\\)\n </span>\n \n\n</div>","metadata":{"editable":false},"pos":35,"type":"cell"}
{"cell_type":"markdown","id":"ec45b6","input":"","metadata":{"editable":true},"pos":59,"type":"cell"}
{"cell_type":"markdown","id":"ee6442","input":"","metadata":{"editable":true},"pos":13,"type":"cell"}
{"cell_type":"markdown","id":"f600b8","input":"","metadata":{"editable":true},"pos":22,"type":"cell"}
{"cell_type":"markdown","id":"f85788","input":"","metadata":{"editable":true},"pos":20,"type":"cell"}
{"cell_type":"markdown","id":"fbff20","input":"","metadata":{"editable":true},"pos":55,"type":"cell"}
{"id":0,"time":1592939989997,"type":"user"}
{"last_load":1592943544790,"type":"file"}